// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tanapon395/playlist-video/ent/adminrepair"
	"github.com/tanapon395/playlist-video/ent/brand"
	"github.com/tanapon395/playlist-video/ent/personal"
	"github.com/tanapon395/playlist-video/ent/product"
	"github.com/tanapon395/playlist-video/ent/receipt"
	"github.com/tanapon395/playlist-video/ent/typeproduct"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetProductname sets the Productname field.
func (pc *ProductCreate) SetProductname(s string) *ProductCreate {
	pc.mutation.SetProductname(s)
	return pc
}

// SetAmountofproduct sets the Amountofproduct field.
func (pc *ProductCreate) SetAmountofproduct(i int) *ProductCreate {
	pc.mutation.SetAmountofproduct(i)
	return pc
}

// SetPrice sets the Price field.
func (pc *ProductCreate) SetPrice(i int) *ProductCreate {
	pc.mutation.SetPrice(i)
	return pc
}

// AddProductIDs adds the product edge to Adminrepair by ids.
func (pc *ProductCreate) AddProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductIDs(ids...)
	return pc
}

// AddProduct adds the product edges to Adminrepair.
func (pc *ProductCreate) AddProduct(a ...*Adminrepair) *ProductCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddProductIDs(ids...)
}

// SetBrandID sets the brand edge to Brand by id.
func (pc *ProductCreate) SetBrandID(id int) *ProductCreate {
	pc.mutation.SetBrandID(id)
	return pc
}

// SetNillableBrandID sets the brand edge to Brand by id if the given value is not nil.
func (pc *ProductCreate) SetNillableBrandID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetBrandID(*id)
	}
	return pc
}

// SetBrand sets the brand edge to Brand.
func (pc *ProductCreate) SetBrand(b *Brand) *ProductCreate {
	return pc.SetBrandID(b.ID)
}

// SetTypeproductID sets the typeproduct edge to Typeproduct by id.
func (pc *ProductCreate) SetTypeproductID(id int) *ProductCreate {
	pc.mutation.SetTypeproductID(id)
	return pc
}

// SetNillableTypeproductID sets the typeproduct edge to Typeproduct by id if the given value is not nil.
func (pc *ProductCreate) SetNillableTypeproductID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetTypeproductID(*id)
	}
	return pc
}

// SetTypeproduct sets the typeproduct edge to Typeproduct.
func (pc *ProductCreate) SetTypeproduct(t *Typeproduct) *ProductCreate {
	return pc.SetTypeproductID(t.ID)
}

// SetPersonalID sets the personal edge to Personal by id.
func (pc *ProductCreate) SetPersonalID(id int) *ProductCreate {
	pc.mutation.SetPersonalID(id)
	return pc
}

// SetNillablePersonalID sets the personal edge to Personal by id if the given value is not nil.
func (pc *ProductCreate) SetNillablePersonalID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetPersonalID(*id)
	}
	return pc
}

// SetPersonal sets the personal edge to Personal.
func (pc *ProductCreate) SetPersonal(p *Personal) *ProductCreate {
	return pc.SetPersonalID(p.ID)
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (pc *ProductCreate) AddReceiptIDs(ids ...int) *ProductCreate {
	pc.mutation.AddReceiptIDs(ids...)
	return pc
}

// AddReceipt adds the receipt edges to Receipt.
func (pc *ProductCreate) AddReceipt(r ...*Receipt) *ProductCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReceiptIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	if _, ok := pc.mutation.Productname(); !ok {
		return nil, &ValidationError{Name: "Productname", err: errors.New("ent: missing required field \"Productname\"")}
	}
	if v, ok := pc.mutation.Productname(); ok {
		if err := product.ProductnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Productname", err: fmt.Errorf("ent: validator failed for field \"Productname\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Amountofproduct(); !ok {
		return nil, &ValidationError{Name: "Amountofproduct", err: errors.New("ent: missing required field \"Amountofproduct\"")}
	}
	if v, ok := pc.mutation.Amountofproduct(); ok {
		if err := product.AmountofproductValidator(v); err != nil {
			return nil, &ValidationError{Name: "Amountofproduct", err: fmt.Errorf("ent: validator failed for field \"Amountofproduct\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return nil, &ValidationError{Name: "Price", err: errors.New("ent: missing required field \"Price\"")}
	}
	if v, ok := pc.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "Price", err: fmt.Errorf("ent: validator failed for field \"Price\": %w", err)}
		}
	}
	var (
		err  error
		node *Product
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		pr    = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Productname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductname,
		})
		pr.Productname = value
	}
	if value, ok := pc.mutation.Amountofproduct(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldAmountofproduct,
		})
		pr.Amountofproduct = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPrice,
		})
		pr.Price = value
	}
	if nodes := pc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductTable,
			Columns: []string{product.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: adminrepair.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.BrandTable,
			Columns: []string{product.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TypeproductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeproductTable,
			Columns: []string{product.TypeproductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PersonalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.PersonalTable,
			Columns: []string{product.PersonalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: personal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ReceiptTable,
			Columns: []string{product.ReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receipt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
