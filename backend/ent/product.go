// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/tanapon395/playlist-video/ent/brand"
	"github.com/tanapon395/playlist-video/ent/personal"
	"github.com/tanapon395/playlist-video/ent/product"
	"github.com/tanapon395/playlist-video/ent/typeproduct"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Productname holds the value of the "Productname" field.
	Productname string `json:"Productname,omitempty"`
	// Amountofproduct holds the value of the "Amountofproduct" field.
	Amountofproduct int `json:"Amountofproduct,omitempty"`
	// Price holds the value of the "Price" field.
	Price int `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges       ProductEdges `json:"edges"`
	Brand       *int
	Personal    *int
	Typeproduct *int
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Product holds the value of the product edge.
	Product []*Adminrepair
	// Brand holds the value of the brand edge.
	Brand *Brand
	// Typeproduct holds the value of the typeproduct edge.
	Typeproduct *Typeproduct
	// Personal holds the value of the personal edge.
	Personal *Personal
	// Receipt holds the value of the receipt edge.
	Receipt []*Receipt
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductOrErr() ([]*Adminrepair, error) {
	if e.loadedTypes[0] {
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) BrandOrErr() (*Brand, error) {
	if e.loadedTypes[1] {
		if e.Brand == nil {
			// The edge brand was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: brand.Label}
		}
		return e.Brand, nil
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// TypeproductOrErr returns the Typeproduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) TypeproductOrErr() (*Typeproduct, error) {
	if e.loadedTypes[2] {
		if e.Typeproduct == nil {
			// The edge typeproduct was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typeproduct.Label}
		}
		return e.Typeproduct, nil
	}
	return nil, &NotLoadedError{edge: "typeproduct"}
}

// PersonalOrErr returns the Personal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) PersonalOrErr() (*Personal, error) {
	if e.loadedTypes[3] {
		if e.Personal == nil {
			// The edge personal was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: personal.Label}
		}
		return e.Personal, nil
	}
	return nil, &NotLoadedError{edge: "personal"}
}

// ReceiptOrErr returns the Receipt value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ReceiptOrErr() ([]*Receipt, error) {
	if e.loadedTypes[4] {
		return e.Receipt, nil
	}
	return nil, &NotLoadedError{edge: "receipt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Productname
		&sql.NullInt64{},  // Amountofproduct
		&sql.NullInt64{},  // Price
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Product) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Brand
		&sql.NullInt64{}, // Personal
		&sql.NullInt64{}, // Typeproduct
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(values ...interface{}) error {
	if m, n := len(values), len(product.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Productname", values[0])
	} else if value.Valid {
		pr.Productname = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Amountofproduct", values[1])
	} else if value.Valid {
		pr.Amountofproduct = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Price", values[2])
	} else if value.Valid {
		pr.Price = int(value.Int64)
	}
	values = values[3:]
	if len(values) == len(product.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Brand", value)
		} else if value.Valid {
			pr.Brand = new(int)
			*pr.Brand = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Personal", value)
		} else if value.Valid {
			pr.Personal = new(int)
			*pr.Personal = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Typeproduct", value)
		} else if value.Valid {
			pr.Typeproduct = new(int)
			*pr.Typeproduct = int(value.Int64)
		}
	}
	return nil
}

// QueryProduct queries the product edge of the Product.
func (pr *Product) QueryProduct() *AdminrepairQuery {
	return (&ProductClient{config: pr.config}).QueryProduct(pr)
}

// QueryBrand queries the brand edge of the Product.
func (pr *Product) QueryBrand() *BrandQuery {
	return (&ProductClient{config: pr.config}).QueryBrand(pr)
}

// QueryTypeproduct queries the typeproduct edge of the Product.
func (pr *Product) QueryTypeproduct() *TypeproductQuery {
	return (&ProductClient{config: pr.config}).QueryTypeproduct(pr)
}

// QueryPersonal queries the personal edge of the Product.
func (pr *Product) QueryPersonal() *PersonalQuery {
	return (&ProductClient{config: pr.config}).QueryPersonal(pr)
}

// QueryReceipt queries the receipt edge of the Product.
func (pr *Product) QueryReceipt() *ReceiptQuery {
	return (&ProductClient{config: pr.config}).QueryReceipt(pr)
}

// Update returns a builder for updating this Product.
// Note that, you need to call Product.Unwrap() before calling this method, if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Productname=")
	builder.WriteString(pr.Productname)
	builder.WriteString(", Amountofproduct=")
	builder.WriteString(fmt.Sprintf("%v", pr.Amountofproduct))
	builder.WriteString(", Price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
