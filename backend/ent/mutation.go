// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/tanapon395/playlist-video/ent/adminrepair"
	"github.com/tanapon395/playlist-video/ent/brand"
	"github.com/tanapon395/playlist-video/ent/customer"
	"github.com/tanapon395/playlist-video/ent/department"
	"github.com/tanapon395/playlist-video/ent/fix"
	"github.com/tanapon395/playlist-video/ent/fixbrand"
	"github.com/tanapon395/playlist-video/ent/fixcomtype"
	"github.com/tanapon395/playlist-video/ent/gender"
	"github.com/tanapon395/playlist-video/ent/paymenttype"
	"github.com/tanapon395/playlist-video/ent/personal"
	"github.com/tanapon395/playlist-video/ent/product"
	"github.com/tanapon395/playlist-video/ent/receipt"
	"github.com/tanapon395/playlist-video/ent/title"
	"github.com/tanapon395/playlist-video/ent/typeproduct"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdminrepair = "Adminrepair"
	TypeBrand       = "Brand"
	TypeCustomer    = "Customer"
	TypeDepartment  = "Department"
	TypeFix         = "Fix"
	TypeFixbrand    = "Fixbrand"
	TypeFixcomtype  = "Fixcomtype"
	TypeGender      = "Gender"
	TypePaymentType = "PaymentType"
	TypePersonal    = "Personal"
	TypeProduct     = "Product"
	TypeReceipt     = "Receipt"
	TypeTitle       = "Title"
	TypeTypeproduct = "Typeproduct"
)

// AdminrepairMutation represents an operation that mutate the Adminrepairs
// nodes in the graph.
type AdminrepairMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	numberrepair                *string
	equipmentdamate             *string
	repairinformation           *string
	clearedFields               map[string]struct{}
	receipt                     map[int]struct{}
	removedreceipt              map[int]struct{}
	_AdminrepairPersonal        *int
	cleared_AdminrepairPersonal bool
	_AdminrepairFix             *int
	cleared_AdminrepairFix      bool
	_AdminrepairProduct         *int
	cleared_AdminrepairProduct  bool
	done                        bool
	oldValue                    func(context.Context) (*Adminrepair, error)
}

var _ ent.Mutation = (*AdminrepairMutation)(nil)

// adminrepairOption allows to manage the mutation configuration using functional options.
type adminrepairOption func(*AdminrepairMutation)

// newAdminrepairMutation creates new mutation for $n.Name.
func newAdminrepairMutation(c config, op Op, opts ...adminrepairOption) *AdminrepairMutation {
	m := &AdminrepairMutation{
		config:        c,
		op:            op,
		typ:           TypeAdminrepair,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdminrepairID sets the id field of the mutation.
func withAdminrepairID(id int) adminrepairOption {
	return func(m *AdminrepairMutation) {
		var (
			err   error
			once  sync.Once
			value *Adminrepair
		)
		m.oldValue = func(ctx context.Context) (*Adminrepair, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Adminrepair.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdminrepair sets the old Adminrepair of the mutation.
func withAdminrepair(node *Adminrepair) adminrepairOption {
	return func(m *AdminrepairMutation) {
		m.oldValue = func(context.Context) (*Adminrepair, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdminrepairMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdminrepairMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AdminrepairMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNumberrepair sets the numberrepair field.
func (m *AdminrepairMutation) SetNumberrepair(s string) {
	m.numberrepair = &s
}

// Numberrepair returns the numberrepair value in the mutation.
func (m *AdminrepairMutation) Numberrepair() (r string, exists bool) {
	v := m.numberrepair
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberrepair returns the old numberrepair value of the Adminrepair.
// If the Adminrepair object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AdminrepairMutation) OldNumberrepair(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumberrepair is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumberrepair requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberrepair: %w", err)
	}
	return oldValue.Numberrepair, nil
}

// ResetNumberrepair reset all changes of the "numberrepair" field.
func (m *AdminrepairMutation) ResetNumberrepair() {
	m.numberrepair = nil
}

// SetEquipmentdamate sets the equipmentdamate field.
func (m *AdminrepairMutation) SetEquipmentdamate(s string) {
	m.equipmentdamate = &s
}

// Equipmentdamate returns the equipmentdamate value in the mutation.
func (m *AdminrepairMutation) Equipmentdamate() (r string, exists bool) {
	v := m.equipmentdamate
	if v == nil {
		return
	}
	return *v, true
}

// OldEquipmentdamate returns the old equipmentdamate value of the Adminrepair.
// If the Adminrepair object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AdminrepairMutation) OldEquipmentdamate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEquipmentdamate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEquipmentdamate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEquipmentdamate: %w", err)
	}
	return oldValue.Equipmentdamate, nil
}

// ResetEquipmentdamate reset all changes of the "equipmentdamate" field.
func (m *AdminrepairMutation) ResetEquipmentdamate() {
	m.equipmentdamate = nil
}

// SetRepairinformation sets the repairinformation field.
func (m *AdminrepairMutation) SetRepairinformation(s string) {
	m.repairinformation = &s
}

// Repairinformation returns the repairinformation value in the mutation.
func (m *AdminrepairMutation) Repairinformation() (r string, exists bool) {
	v := m.repairinformation
	if v == nil {
		return
	}
	return *v, true
}

// OldRepairinformation returns the old repairinformation value of the Adminrepair.
// If the Adminrepair object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AdminrepairMutation) OldRepairinformation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepairinformation is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepairinformation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepairinformation: %w", err)
	}
	return oldValue.Repairinformation, nil
}

// ResetRepairinformation reset all changes of the "repairinformation" field.
func (m *AdminrepairMutation) ResetRepairinformation() {
	m.repairinformation = nil
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (m *AdminrepairMutation) AddReceiptIDs(ids ...int) {
	if m.receipt == nil {
		m.receipt = make(map[int]struct{})
	}
	for i := range ids {
		m.receipt[ids[i]] = struct{}{}
	}
}

// RemoveReceiptIDs removes the receipt edge to Receipt by ids.
func (m *AdminrepairMutation) RemoveReceiptIDs(ids ...int) {
	if m.removedreceipt == nil {
		m.removedreceipt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedreceipt[ids[i]] = struct{}{}
	}
}

// RemovedReceipt returns the removed ids of receipt.
func (m *AdminrepairMutation) RemovedReceiptIDs() (ids []int) {
	for id := range m.removedreceipt {
		ids = append(ids, id)
	}
	return
}

// ReceiptIDs returns the receipt ids in the mutation.
func (m *AdminrepairMutation) ReceiptIDs() (ids []int) {
	for id := range m.receipt {
		ids = append(ids, id)
	}
	return
}

// ResetReceipt reset all changes of the "receipt" edge.
func (m *AdminrepairMutation) ResetReceipt() {
	m.receipt = nil
	m.removedreceipt = nil
}

// SetAdminrepairPersonalID sets the AdminrepairPersonal edge to Personal by id.
func (m *AdminrepairMutation) SetAdminrepairPersonalID(id int) {
	m._AdminrepairPersonal = &id
}

// ClearAdminrepairPersonal clears the AdminrepairPersonal edge to Personal.
func (m *AdminrepairMutation) ClearAdminrepairPersonal() {
	m.cleared_AdminrepairPersonal = true
}

// AdminrepairPersonalCleared returns if the edge AdminrepairPersonal was cleared.
func (m *AdminrepairMutation) AdminrepairPersonalCleared() bool {
	return m.cleared_AdminrepairPersonal
}

// AdminrepairPersonalID returns the AdminrepairPersonal id in the mutation.
func (m *AdminrepairMutation) AdminrepairPersonalID() (id int, exists bool) {
	if m._AdminrepairPersonal != nil {
		return *m._AdminrepairPersonal, true
	}
	return
}

// AdminrepairPersonalIDs returns the AdminrepairPersonal ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AdminrepairPersonalID instead. It exists only for internal usage by the builders.
func (m *AdminrepairMutation) AdminrepairPersonalIDs() (ids []int) {
	if id := m._AdminrepairPersonal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdminrepairPersonal reset all changes of the "AdminrepairPersonal" edge.
func (m *AdminrepairMutation) ResetAdminrepairPersonal() {
	m._AdminrepairPersonal = nil
	m.cleared_AdminrepairPersonal = false
}

// SetAdminrepairFixID sets the AdminrepairFix edge to Fix by id.
func (m *AdminrepairMutation) SetAdminrepairFixID(id int) {
	m._AdminrepairFix = &id
}

// ClearAdminrepairFix clears the AdminrepairFix edge to Fix.
func (m *AdminrepairMutation) ClearAdminrepairFix() {
	m.cleared_AdminrepairFix = true
}

// AdminrepairFixCleared returns if the edge AdminrepairFix was cleared.
func (m *AdminrepairMutation) AdminrepairFixCleared() bool {
	return m.cleared_AdminrepairFix
}

// AdminrepairFixID returns the AdminrepairFix id in the mutation.
func (m *AdminrepairMutation) AdminrepairFixID() (id int, exists bool) {
	if m._AdminrepairFix != nil {
		return *m._AdminrepairFix, true
	}
	return
}

// AdminrepairFixIDs returns the AdminrepairFix ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AdminrepairFixID instead. It exists only for internal usage by the builders.
func (m *AdminrepairMutation) AdminrepairFixIDs() (ids []int) {
	if id := m._AdminrepairFix; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdminrepairFix reset all changes of the "AdminrepairFix" edge.
func (m *AdminrepairMutation) ResetAdminrepairFix() {
	m._AdminrepairFix = nil
	m.cleared_AdminrepairFix = false
}

// SetAdminrepairProductID sets the AdminrepairProduct edge to Product by id.
func (m *AdminrepairMutation) SetAdminrepairProductID(id int) {
	m._AdminrepairProduct = &id
}

// ClearAdminrepairProduct clears the AdminrepairProduct edge to Product.
func (m *AdminrepairMutation) ClearAdminrepairProduct() {
	m.cleared_AdminrepairProduct = true
}

// AdminrepairProductCleared returns if the edge AdminrepairProduct was cleared.
func (m *AdminrepairMutation) AdminrepairProductCleared() bool {
	return m.cleared_AdminrepairProduct
}

// AdminrepairProductID returns the AdminrepairProduct id in the mutation.
func (m *AdminrepairMutation) AdminrepairProductID() (id int, exists bool) {
	if m._AdminrepairProduct != nil {
		return *m._AdminrepairProduct, true
	}
	return
}

// AdminrepairProductIDs returns the AdminrepairProduct ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AdminrepairProductID instead. It exists only for internal usage by the builders.
func (m *AdminrepairMutation) AdminrepairProductIDs() (ids []int) {
	if id := m._AdminrepairProduct; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdminrepairProduct reset all changes of the "AdminrepairProduct" edge.
func (m *AdminrepairMutation) ResetAdminrepairProduct() {
	m._AdminrepairProduct = nil
	m.cleared_AdminrepairProduct = false
}

// Op returns the operation name.
func (m *AdminrepairMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Adminrepair).
func (m *AdminrepairMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AdminrepairMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.numberrepair != nil {
		fields = append(fields, adminrepair.FieldNumberrepair)
	}
	if m.equipmentdamate != nil {
		fields = append(fields, adminrepair.FieldEquipmentdamate)
	}
	if m.repairinformation != nil {
		fields = append(fields, adminrepair.FieldRepairinformation)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AdminrepairMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adminrepair.FieldNumberrepair:
		return m.Numberrepair()
	case adminrepair.FieldEquipmentdamate:
		return m.Equipmentdamate()
	case adminrepair.FieldRepairinformation:
		return m.Repairinformation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AdminrepairMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adminrepair.FieldNumberrepair:
		return m.OldNumberrepair(ctx)
	case adminrepair.FieldEquipmentdamate:
		return m.OldEquipmentdamate(ctx)
	case adminrepair.FieldRepairinformation:
		return m.OldRepairinformation(ctx)
	}
	return nil, fmt.Errorf("unknown Adminrepair field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AdminrepairMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adminrepair.FieldNumberrepair:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberrepair(v)
		return nil
	case adminrepair.FieldEquipmentdamate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEquipmentdamate(v)
		return nil
	case adminrepair.FieldRepairinformation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepairinformation(v)
		return nil
	}
	return fmt.Errorf("unknown Adminrepair field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AdminrepairMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AdminrepairMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AdminrepairMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Adminrepair numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AdminrepairMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AdminrepairMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdminrepairMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Adminrepair nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AdminrepairMutation) ResetField(name string) error {
	switch name {
	case adminrepair.FieldNumberrepair:
		m.ResetNumberrepair()
		return nil
	case adminrepair.FieldEquipmentdamate:
		m.ResetEquipmentdamate()
		return nil
	case adminrepair.FieldRepairinformation:
		m.ResetRepairinformation()
		return nil
	}
	return fmt.Errorf("unknown Adminrepair field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AdminrepairMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.receipt != nil {
		edges = append(edges, adminrepair.EdgeReceipt)
	}
	if m._AdminrepairPersonal != nil {
		edges = append(edges, adminrepair.EdgeAdminrepairPersonal)
	}
	if m._AdminrepairFix != nil {
		edges = append(edges, adminrepair.EdgeAdminrepairFix)
	}
	if m._AdminrepairProduct != nil {
		edges = append(edges, adminrepair.EdgeAdminrepairProduct)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AdminrepairMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case adminrepair.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.receipt))
		for id := range m.receipt {
			ids = append(ids, id)
		}
		return ids
	case adminrepair.EdgeAdminrepairPersonal:
		if id := m._AdminrepairPersonal; id != nil {
			return []ent.Value{*id}
		}
	case adminrepair.EdgeAdminrepairFix:
		if id := m._AdminrepairFix; id != nil {
			return []ent.Value{*id}
		}
	case adminrepair.EdgeAdminrepairProduct:
		if id := m._AdminrepairProduct; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AdminrepairMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedreceipt != nil {
		edges = append(edges, adminrepair.EdgeReceipt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AdminrepairMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case adminrepair.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.removedreceipt))
		for id := range m.removedreceipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AdminrepairMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_AdminrepairPersonal {
		edges = append(edges, adminrepair.EdgeAdminrepairPersonal)
	}
	if m.cleared_AdminrepairFix {
		edges = append(edges, adminrepair.EdgeAdminrepairFix)
	}
	if m.cleared_AdminrepairProduct {
		edges = append(edges, adminrepair.EdgeAdminrepairProduct)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AdminrepairMutation) EdgeCleared(name string) bool {
	switch name {
	case adminrepair.EdgeAdminrepairPersonal:
		return m.cleared_AdminrepairPersonal
	case adminrepair.EdgeAdminrepairFix:
		return m.cleared_AdminrepairFix
	case adminrepair.EdgeAdminrepairProduct:
		return m.cleared_AdminrepairProduct
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AdminrepairMutation) ClearEdge(name string) error {
	switch name {
	case adminrepair.EdgeAdminrepairPersonal:
		m.ClearAdminrepairPersonal()
		return nil
	case adminrepair.EdgeAdminrepairFix:
		m.ClearAdminrepairFix()
		return nil
	case adminrepair.EdgeAdminrepairProduct:
		m.ClearAdminrepairProduct()
		return nil
	}
	return fmt.Errorf("unknown Adminrepair unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AdminrepairMutation) ResetEdge(name string) error {
	switch name {
	case adminrepair.EdgeReceipt:
		m.ResetReceipt()
		return nil
	case adminrepair.EdgeAdminrepairPersonal:
		m.ResetAdminrepairPersonal()
		return nil
	case adminrepair.EdgeAdminrepairFix:
		m.ResetAdminrepairFix()
		return nil
	case adminrepair.EdgeAdminrepairProduct:
		m.ResetAdminrepairProduct()
		return nil
	}
	return fmt.Errorf("unknown Adminrepair edge %s", name)
}

// BrandMutation represents an operation that mutate the Brands
// nodes in the graph.
type BrandMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Brandname     *string
	clearedFields  map[string]struct{}
	product        map[int]struct{}
	removedproduct map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Brand, error)
}

var _ ent.Mutation = (*BrandMutation)(nil)

// brandOption allows to manage the mutation configuration using functional options.
type brandOption func(*BrandMutation)

// newBrandMutation creates new mutation for $n.Name.
func newBrandMutation(c config, op Op, opts ...brandOption) *BrandMutation {
	m := &BrandMutation{
		config:        c,
		op:            op,
		typ:           TypeBrand,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBrandID sets the id field of the mutation.
func withBrandID(id int) brandOption {
	return func(m *BrandMutation) {
		var (
			err   error
			once  sync.Once
			value *Brand
		)
		m.oldValue = func(ctx context.Context) (*Brand, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Brand.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBrand sets the old Brand of the mutation.
func withBrand(node *Brand) brandOption {
	return func(m *BrandMutation) {
		m.oldValue = func(context.Context) (*Brand, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BrandMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BrandMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BrandMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBrandname sets the Brandname field.
func (m *BrandMutation) SetBrandname(s string) {
	m._Brandname = &s
}

// Brandname returns the Brandname value in the mutation.
func (m *BrandMutation) Brandname() (r string, exists bool) {
	v := m._Brandname
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandname returns the old Brandname value of the Brand.
// If the Brand object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BrandMutation) OldBrandname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrandname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrandname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandname: %w", err)
	}
	return oldValue.Brandname, nil
}

// ResetBrandname reset all changes of the "Brandname" field.
func (m *BrandMutation) ResetBrandname() {
	m._Brandname = nil
}

// AddProductIDs adds the product edge to Product by ids.
func (m *BrandMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// RemoveProductIDs removes the product edge to Product by ids.
func (m *BrandMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed ids of product.
func (m *BrandMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the product ids in the mutation.
func (m *BrandMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *BrandMutation) ResetProduct() {
	m.product = nil
	m.removedproduct = nil
}

// Op returns the operation name.
func (m *BrandMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Brand).
func (m *BrandMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BrandMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Brandname != nil {
		fields = append(fields, brand.FieldBrandname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BrandMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case brand.FieldBrandname:
		return m.Brandname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BrandMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case brand.FieldBrandname:
		return m.OldBrandname(ctx)
	}
	return nil, fmt.Errorf("unknown Brand field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BrandMutation) SetField(name string, value ent.Value) error {
	switch name {
	case brand.FieldBrandname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandname(v)
		return nil
	}
	return fmt.Errorf("unknown Brand field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BrandMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BrandMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BrandMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Brand numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BrandMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BrandMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BrandMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Brand nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BrandMutation) ResetField(name string) error {
	switch name {
	case brand.FieldBrandname:
		m.ResetBrandname()
		return nil
	}
	return fmt.Errorf("unknown Brand field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BrandMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.product != nil {
		edges = append(edges, brand.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BrandMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case brand.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BrandMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproduct != nil {
		edges = append(edges, brand.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BrandMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case brand.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BrandMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BrandMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BrandMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Brand unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BrandMutation) ResetEdge(name string) error {
	switch name {
	case brand.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown Brand edge %s", name)
}

// CustomerMutation represents an operation that mutate the Customers
// nodes in the graph.
type CustomerMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Customername         *string
	_Address              *string
	_Phonenumber          *string
	_Identificationnumber *string
	clearedFields         map[string]struct{}
	gender                *int
	clearedgender         bool
	personal              *int
	clearedpersonal       bool
	title                 *int
	clearedtitle          bool
	fix                   map[int]struct{}
	removedfix            map[int]struct{}
	receipt               map[int]struct{}
	removedreceipt        map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Customer, error)
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows to manage the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for $n.Name.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the id field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCustomername sets the Customername field.
func (m *CustomerMutation) SetCustomername(s string) {
	m._Customername = &s
}

// Customername returns the Customername value in the mutation.
func (m *CustomerMutation) Customername() (r string, exists bool) {
	v := m._Customername
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomername returns the old Customername value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldCustomername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomername: %w", err)
	}
	return oldValue.Customername, nil
}

// ResetCustomername reset all changes of the "Customername" field.
func (m *CustomerMutation) ResetCustomername() {
	m._Customername = nil
}

// SetAddress sets the Address field.
func (m *CustomerMutation) SetAddress(s string) {
	m._Address = &s
}

// Address returns the Address value in the mutation.
func (m *CustomerMutation) Address() (r string, exists bool) {
	v := m._Address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old Address value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "Address" field.
func (m *CustomerMutation) ResetAddress() {
	m._Address = nil
}

// SetPhonenumber sets the Phonenumber field.
func (m *CustomerMutation) SetPhonenumber(s string) {
	m._Phonenumber = &s
}

// Phonenumber returns the Phonenumber value in the mutation.
func (m *CustomerMutation) Phonenumber() (r string, exists bool) {
	v := m._Phonenumber
	if v == nil {
		return
	}
	return *v, true
}

// OldPhonenumber returns the old Phonenumber value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldPhonenumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhonenumber is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhonenumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhonenumber: %w", err)
	}
	return oldValue.Phonenumber, nil
}

// ResetPhonenumber reset all changes of the "Phonenumber" field.
func (m *CustomerMutation) ResetPhonenumber() {
	m._Phonenumber = nil
}

// SetIdentificationnumber sets the Identificationnumber field.
func (m *CustomerMutation) SetIdentificationnumber(s string) {
	m._Identificationnumber = &s
}

// Identificationnumber returns the Identificationnumber value in the mutation.
func (m *CustomerMutation) Identificationnumber() (r string, exists bool) {
	v := m._Identificationnumber
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentificationnumber returns the old Identificationnumber value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldIdentificationnumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentificationnumber is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentificationnumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentificationnumber: %w", err)
	}
	return oldValue.Identificationnumber, nil
}

// ResetIdentificationnumber reset all changes of the "Identificationnumber" field.
func (m *CustomerMutation) ResetIdentificationnumber() {
	m._Identificationnumber = nil
}

// SetGenderID sets the gender edge to Gender by id.
func (m *CustomerMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *CustomerMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *CustomerMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *CustomerMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *CustomerMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetPersonalID sets the personal edge to Personal by id.
func (m *CustomerMutation) SetPersonalID(id int) {
	m.personal = &id
}

// ClearPersonal clears the personal edge to Personal.
func (m *CustomerMutation) ClearPersonal() {
	m.clearedpersonal = true
}

// PersonalCleared returns if the edge personal was cleared.
func (m *CustomerMutation) PersonalCleared() bool {
	return m.clearedpersonal
}

// PersonalID returns the personal id in the mutation.
func (m *CustomerMutation) PersonalID() (id int, exists bool) {
	if m.personal != nil {
		return *m.personal, true
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PersonalID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) PersonalIDs() (ids []int) {
	if id := m.personal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *CustomerMutation) ResetPersonal() {
	m.personal = nil
	m.clearedpersonal = false
}

// SetTitleID sets the title edge to Title by id.
func (m *CustomerMutation) SetTitleID(id int) {
	m.title = &id
}

// ClearTitle clears the title edge to Title.
func (m *CustomerMutation) ClearTitle() {
	m.clearedtitle = true
}

// TitleCleared returns if the edge title was cleared.
func (m *CustomerMutation) TitleCleared() bool {
	return m.clearedtitle
}

// TitleID returns the title id in the mutation.
func (m *CustomerMutation) TitleID() (id int, exists bool) {
	if m.title != nil {
		return *m.title, true
	}
	return
}

// TitleIDs returns the title ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TitleID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) TitleIDs() (ids []int) {
	if id := m.title; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTitle reset all changes of the "title" edge.
func (m *CustomerMutation) ResetTitle() {
	m.title = nil
	m.clearedtitle = false
}

// AddFixIDs adds the fix edge to Fix by ids.
func (m *CustomerMutation) AddFixIDs(ids ...int) {
	if m.fix == nil {
		m.fix = make(map[int]struct{})
	}
	for i := range ids {
		m.fix[ids[i]] = struct{}{}
	}
}

// RemoveFixIDs removes the fix edge to Fix by ids.
func (m *CustomerMutation) RemoveFixIDs(ids ...int) {
	if m.removedfix == nil {
		m.removedfix = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfix[ids[i]] = struct{}{}
	}
}

// RemovedFix returns the removed ids of fix.
func (m *CustomerMutation) RemovedFixIDs() (ids []int) {
	for id := range m.removedfix {
		ids = append(ids, id)
	}
	return
}

// FixIDs returns the fix ids in the mutation.
func (m *CustomerMutation) FixIDs() (ids []int) {
	for id := range m.fix {
		ids = append(ids, id)
	}
	return
}

// ResetFix reset all changes of the "fix" edge.
func (m *CustomerMutation) ResetFix() {
	m.fix = nil
	m.removedfix = nil
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (m *CustomerMutation) AddReceiptIDs(ids ...int) {
	if m.receipt == nil {
		m.receipt = make(map[int]struct{})
	}
	for i := range ids {
		m.receipt[ids[i]] = struct{}{}
	}
}

// RemoveReceiptIDs removes the receipt edge to Receipt by ids.
func (m *CustomerMutation) RemoveReceiptIDs(ids ...int) {
	if m.removedreceipt == nil {
		m.removedreceipt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedreceipt[ids[i]] = struct{}{}
	}
}

// RemovedReceipt returns the removed ids of receipt.
func (m *CustomerMutation) RemovedReceiptIDs() (ids []int) {
	for id := range m.removedreceipt {
		ids = append(ids, id)
	}
	return
}

// ReceiptIDs returns the receipt ids in the mutation.
func (m *CustomerMutation) ReceiptIDs() (ids []int) {
	for id := range m.receipt {
		ids = append(ids, id)
	}
	return
}

// ResetReceipt reset all changes of the "receipt" edge.
func (m *CustomerMutation) ResetReceipt() {
	m.receipt = nil
	m.removedreceipt = nil
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Customername != nil {
		fields = append(fields, customer.FieldCustomername)
	}
	if m._Address != nil {
		fields = append(fields, customer.FieldAddress)
	}
	if m._Phonenumber != nil {
		fields = append(fields, customer.FieldPhonenumber)
	}
	if m._Identificationnumber != nil {
		fields = append(fields, customer.FieldIdentificationnumber)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldCustomername:
		return m.Customername()
	case customer.FieldAddress:
		return m.Address()
	case customer.FieldPhonenumber:
		return m.Phonenumber()
	case customer.FieldIdentificationnumber:
		return m.Identificationnumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldCustomername:
		return m.OldCustomername(ctx)
	case customer.FieldAddress:
		return m.OldAddress(ctx)
	case customer.FieldPhonenumber:
		return m.OldPhonenumber(ctx)
	case customer.FieldIdentificationnumber:
		return m.OldIdentificationnumber(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldCustomername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomername(v)
		return nil
	case customer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case customer.FieldPhonenumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhonenumber(v)
		return nil
	case customer.FieldIdentificationnumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentificationnumber(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldCustomername:
		m.ResetCustomername()
		return nil
	case customer.FieldAddress:
		m.ResetAddress()
		return nil
	case customer.FieldPhonenumber:
		m.ResetPhonenumber()
		return nil
	case customer.FieldIdentificationnumber:
		m.ResetIdentificationnumber()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.gender != nil {
		edges = append(edges, customer.EdgeGender)
	}
	if m.personal != nil {
		edges = append(edges, customer.EdgePersonal)
	}
	if m.title != nil {
		edges = append(edges, customer.EdgeTitle)
	}
	if m.fix != nil {
		edges = append(edges, customer.EdgeFix)
	}
	if m.receipt != nil {
		edges = append(edges, customer.EdgeReceipt)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case customer.EdgePersonal:
		if id := m.personal; id != nil {
			return []ent.Value{*id}
		}
	case customer.EdgeTitle:
		if id := m.title; id != nil {
			return []ent.Value{*id}
		}
	case customer.EdgeFix:
		ids := make([]ent.Value, 0, len(m.fix))
		for id := range m.fix {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.receipt))
		for id := range m.receipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedfix != nil {
		edges = append(edges, customer.EdgeFix)
	}
	if m.removedreceipt != nil {
		edges = append(edges, customer.EdgeReceipt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeFix:
		ids := make([]ent.Value, 0, len(m.removedfix))
		for id := range m.removedfix {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.removedreceipt))
		for id := range m.removedreceipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedgender {
		edges = append(edges, customer.EdgeGender)
	}
	if m.clearedpersonal {
		edges = append(edges, customer.EdgePersonal)
	}
	if m.clearedtitle {
		edges = append(edges, customer.EdgeTitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeGender:
		return m.clearedgender
	case customer.EdgePersonal:
		return m.clearedpersonal
	case customer.EdgeTitle:
		return m.clearedtitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	case customer.EdgeGender:
		m.ClearGender()
		return nil
	case customer.EdgePersonal:
		m.ClearPersonal()
		return nil
	case customer.EdgeTitle:
		m.ClearTitle()
		return nil
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeGender:
		m.ResetGender()
		return nil
	case customer.EdgePersonal:
		m.ResetPersonal()
		return nil
	case customer.EdgeTitle:
		m.ResetTitle()
		return nil
	case customer.EdgeFix:
		m.ResetFix()
		return nil
	case customer.EdgeReceipt:
		m.ResetReceipt()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Departmentname *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentname sets the Departmentname field.
func (m *DepartmentMutation) SetDepartmentname(s string) {
	m._Departmentname = &s
}

// Departmentname returns the Departmentname value in the mutation.
func (m *DepartmentMutation) Departmentname() (r string, exists bool) {
	v := m._Departmentname
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentname returns the old Departmentname value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentname: %w", err)
	}
	return oldValue.Departmentname, nil
}

// ResetDepartmentname reset all changes of the "Departmentname" field.
func (m *DepartmentMutation) ResetDepartmentname() {
	m._Departmentname = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *DepartmentMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *DepartmentMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *DepartmentMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *DepartmentMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *DepartmentMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Departmentname != nil {
		fields = append(fields, department.FieldDepartmentname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentname:
		return m.Departmentname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentname:
		return m.OldDepartmentname(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentname(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentname:
		m.ResetDepartmentname()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personal != nil {
		edges = append(edges, department.EdgePersonal)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonal != nil {
		edges = append(edges, department.EdgePersonal)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgePersonal:
		m.ResetPersonal()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// FixMutation represents an operation that mutate the Fixes
// nodes in the graph.
type FixMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Productnumber    *string
	_Problemtype      *string
	_Queue            *string
	_Date             *time.Time
	clearedFields     map[string]struct{}
	fix               *int
	clearedfix        bool
	fixbrand          *int
	clearedfixbrand   bool
	personal          *int
	clearedpersonal   bool
	customer          *int
	clearedcustomer   bool
	fixcomtype        *int
	clearedfixcomtype bool
	done              bool
	oldValue          func(context.Context) (*Fix, error)
}

var _ ent.Mutation = (*FixMutation)(nil)

// fixOption allows to manage the mutation configuration using functional options.
type fixOption func(*FixMutation)

// newFixMutation creates new mutation for $n.Name.
func newFixMutation(c config, op Op, opts ...fixOption) *FixMutation {
	m := &FixMutation{
		config:        c,
		op:            op,
		typ:           TypeFix,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFixID sets the id field of the mutation.
func withFixID(id int) fixOption {
	return func(m *FixMutation) {
		var (
			err   error
			once  sync.Once
			value *Fix
		)
		m.oldValue = func(ctx context.Context) (*Fix, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fix.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFix sets the old Fix of the mutation.
func withFix(node *Fix) fixOption {
	return func(m *FixMutation) {
		m.oldValue = func(context.Context) (*Fix, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FixMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FixMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FixMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProductnumber sets the Productnumber field.
func (m *FixMutation) SetProductnumber(s string) {
	m._Productnumber = &s
}

// Productnumber returns the Productnumber value in the mutation.
func (m *FixMutation) Productnumber() (r string, exists bool) {
	v := m._Productnumber
	if v == nil {
		return
	}
	return *v, true
}

// OldProductnumber returns the old Productnumber value of the Fix.
// If the Fix object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixMutation) OldProductnumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductnumber is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductnumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductnumber: %w", err)
	}
	return oldValue.Productnumber, nil
}

// ResetProductnumber reset all changes of the "Productnumber" field.
func (m *FixMutation) ResetProductnumber() {
	m._Productnumber = nil
}

// SetProblemtype sets the Problemtype field.
func (m *FixMutation) SetProblemtype(s string) {
	m._Problemtype = &s
}

// Problemtype returns the Problemtype value in the mutation.
func (m *FixMutation) Problemtype() (r string, exists bool) {
	v := m._Problemtype
	if v == nil {
		return
	}
	return *v, true
}

// OldProblemtype returns the old Problemtype value of the Fix.
// If the Fix object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixMutation) OldProblemtype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProblemtype is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProblemtype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProblemtype: %w", err)
	}
	return oldValue.Problemtype, nil
}

// ResetProblemtype reset all changes of the "Problemtype" field.
func (m *FixMutation) ResetProblemtype() {
	m._Problemtype = nil
}

// SetQueue sets the Queue field.
func (m *FixMutation) SetQueue(s string) {
	m._Queue = &s
}

// Queue returns the Queue value in the mutation.
func (m *FixMutation) Queue() (r string, exists bool) {
	v := m._Queue
	if v == nil {
		return
	}
	return *v, true
}

// OldQueue returns the old Queue value of the Fix.
// If the Fix object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixMutation) OldQueue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQueue is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQueue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQueue: %w", err)
	}
	return oldValue.Queue, nil
}

// ResetQueue reset all changes of the "Queue" field.
func (m *FixMutation) ResetQueue() {
	m._Queue = nil
}

// SetDate sets the Date field.
func (m *FixMutation) SetDate(t time.Time) {
	m._Date = &t
}

// Date returns the Date value in the mutation.
func (m *FixMutation) Date() (r time.Time, exists bool) {
	v := m._Date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old Date value of the Fix.
// If the Fix object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate reset all changes of the "Date" field.
func (m *FixMutation) ResetDate() {
	m._Date = nil
}

// SetFixID sets the fix edge to Adminrepair by id.
func (m *FixMutation) SetFixID(id int) {
	m.fix = &id
}

// ClearFix clears the fix edge to Adminrepair.
func (m *FixMutation) ClearFix() {
	m.clearedfix = true
}

// FixCleared returns if the edge fix was cleared.
func (m *FixMutation) FixCleared() bool {
	return m.clearedfix
}

// FixID returns the fix id in the mutation.
func (m *FixMutation) FixID() (id int, exists bool) {
	if m.fix != nil {
		return *m.fix, true
	}
	return
}

// FixIDs returns the fix ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FixID instead. It exists only for internal usage by the builders.
func (m *FixMutation) FixIDs() (ids []int) {
	if id := m.fix; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFix reset all changes of the "fix" edge.
func (m *FixMutation) ResetFix() {
	m.fix = nil
	m.clearedfix = false
}

// SetFixbrandID sets the fixbrand edge to Fixbrand by id.
func (m *FixMutation) SetFixbrandID(id int) {
	m.fixbrand = &id
}

// ClearFixbrand clears the fixbrand edge to Fixbrand.
func (m *FixMutation) ClearFixbrand() {
	m.clearedfixbrand = true
}

// FixbrandCleared returns if the edge fixbrand was cleared.
func (m *FixMutation) FixbrandCleared() bool {
	return m.clearedfixbrand
}

// FixbrandID returns the fixbrand id in the mutation.
func (m *FixMutation) FixbrandID() (id int, exists bool) {
	if m.fixbrand != nil {
		return *m.fixbrand, true
	}
	return
}

// FixbrandIDs returns the fixbrand ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FixbrandID instead. It exists only for internal usage by the builders.
func (m *FixMutation) FixbrandIDs() (ids []int) {
	if id := m.fixbrand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFixbrand reset all changes of the "fixbrand" edge.
func (m *FixMutation) ResetFixbrand() {
	m.fixbrand = nil
	m.clearedfixbrand = false
}

// SetPersonalID sets the personal edge to Personal by id.
func (m *FixMutation) SetPersonalID(id int) {
	m.personal = &id
}

// ClearPersonal clears the personal edge to Personal.
func (m *FixMutation) ClearPersonal() {
	m.clearedpersonal = true
}

// PersonalCleared returns if the edge personal was cleared.
func (m *FixMutation) PersonalCleared() bool {
	return m.clearedpersonal
}

// PersonalID returns the personal id in the mutation.
func (m *FixMutation) PersonalID() (id int, exists bool) {
	if m.personal != nil {
		return *m.personal, true
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PersonalID instead. It exists only for internal usage by the builders.
func (m *FixMutation) PersonalIDs() (ids []int) {
	if id := m.personal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *FixMutation) ResetPersonal() {
	m.personal = nil
	m.clearedpersonal = false
}

// SetCustomerID sets the customer edge to Customer by id.
func (m *FixMutation) SetCustomerID(id int) {
	m.customer = &id
}

// ClearCustomer clears the customer edge to Customer.
func (m *FixMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared returns if the edge customer was cleared.
func (m *FixMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the customer id in the mutation.
func (m *FixMutation) CustomerID() (id int, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *FixMutation) CustomerIDs() (ids []int) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *FixMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// SetFixcomtypeID sets the fixcomtype edge to Fixcomtype by id.
func (m *FixMutation) SetFixcomtypeID(id int) {
	m.fixcomtype = &id
}

// ClearFixcomtype clears the fixcomtype edge to Fixcomtype.
func (m *FixMutation) ClearFixcomtype() {
	m.clearedfixcomtype = true
}

// FixcomtypeCleared returns if the edge fixcomtype was cleared.
func (m *FixMutation) FixcomtypeCleared() bool {
	return m.clearedfixcomtype
}

// FixcomtypeID returns the fixcomtype id in the mutation.
func (m *FixMutation) FixcomtypeID() (id int, exists bool) {
	if m.fixcomtype != nil {
		return *m.fixcomtype, true
	}
	return
}

// FixcomtypeIDs returns the fixcomtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FixcomtypeID instead. It exists only for internal usage by the builders.
func (m *FixMutation) FixcomtypeIDs() (ids []int) {
	if id := m.fixcomtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFixcomtype reset all changes of the "fixcomtype" edge.
func (m *FixMutation) ResetFixcomtype() {
	m.fixcomtype = nil
	m.clearedfixcomtype = false
}

// Op returns the operation name.
func (m *FixMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fix).
func (m *FixMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FixMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Productnumber != nil {
		fields = append(fields, fix.FieldProductnumber)
	}
	if m._Problemtype != nil {
		fields = append(fields, fix.FieldProblemtype)
	}
	if m._Queue != nil {
		fields = append(fields, fix.FieldQueue)
	}
	if m._Date != nil {
		fields = append(fields, fix.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FixMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fix.FieldProductnumber:
		return m.Productnumber()
	case fix.FieldProblemtype:
		return m.Problemtype()
	case fix.FieldQueue:
		return m.Queue()
	case fix.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FixMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fix.FieldProductnumber:
		return m.OldProductnumber(ctx)
	case fix.FieldProblemtype:
		return m.OldProblemtype(ctx)
	case fix.FieldQueue:
		return m.OldQueue(ctx)
	case fix.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Fix field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fix.FieldProductnumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductnumber(v)
		return nil
	case fix.FieldProblemtype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProblemtype(v)
		return nil
	case fix.FieldQueue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQueue(v)
		return nil
	case fix.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Fix field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FixMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FixMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fix numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FixMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FixMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FixMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fix nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FixMutation) ResetField(name string) error {
	switch name {
	case fix.FieldProductnumber:
		m.ResetProductnumber()
		return nil
	case fix.FieldProblemtype:
		m.ResetProblemtype()
		return nil
	case fix.FieldQueue:
		m.ResetQueue()
		return nil
	case fix.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Fix field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FixMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.fix != nil {
		edges = append(edges, fix.EdgeFix)
	}
	if m.fixbrand != nil {
		edges = append(edges, fix.EdgeFixbrand)
	}
	if m.personal != nil {
		edges = append(edges, fix.EdgePersonal)
	}
	if m.customer != nil {
		edges = append(edges, fix.EdgeCustomer)
	}
	if m.fixcomtype != nil {
		edges = append(edges, fix.EdgeFixcomtype)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FixMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fix.EdgeFix:
		if id := m.fix; id != nil {
			return []ent.Value{*id}
		}
	case fix.EdgeFixbrand:
		if id := m.fixbrand; id != nil {
			return []ent.Value{*id}
		}
	case fix.EdgePersonal:
		if id := m.personal; id != nil {
			return []ent.Value{*id}
		}
	case fix.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	case fix.EdgeFixcomtype:
		if id := m.fixcomtype; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FixMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FixMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FixMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedfix {
		edges = append(edges, fix.EdgeFix)
	}
	if m.clearedfixbrand {
		edges = append(edges, fix.EdgeFixbrand)
	}
	if m.clearedpersonal {
		edges = append(edges, fix.EdgePersonal)
	}
	if m.clearedcustomer {
		edges = append(edges, fix.EdgeCustomer)
	}
	if m.clearedfixcomtype {
		edges = append(edges, fix.EdgeFixcomtype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FixMutation) EdgeCleared(name string) bool {
	switch name {
	case fix.EdgeFix:
		return m.clearedfix
	case fix.EdgeFixbrand:
		return m.clearedfixbrand
	case fix.EdgePersonal:
		return m.clearedpersonal
	case fix.EdgeCustomer:
		return m.clearedcustomer
	case fix.EdgeFixcomtype:
		return m.clearedfixcomtype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FixMutation) ClearEdge(name string) error {
	switch name {
	case fix.EdgeFix:
		m.ClearFix()
		return nil
	case fix.EdgeFixbrand:
		m.ClearFixbrand()
		return nil
	case fix.EdgePersonal:
		m.ClearPersonal()
		return nil
	case fix.EdgeCustomer:
		m.ClearCustomer()
		return nil
	case fix.EdgeFixcomtype:
		m.ClearFixcomtype()
		return nil
	}
	return fmt.Errorf("unknown Fix unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FixMutation) ResetEdge(name string) error {
	switch name {
	case fix.EdgeFix:
		m.ResetFix()
		return nil
	case fix.EdgeFixbrand:
		m.ResetFixbrand()
		return nil
	case fix.EdgePersonal:
		m.ResetPersonal()
		return nil
	case fix.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case fix.EdgeFixcomtype:
		m.ResetFixcomtype()
		return nil
	}
	return fmt.Errorf("unknown Fix edge %s", name)
}

// FixbrandMutation represents an operation that mutate the Fixbrands
// nodes in the graph.
type FixbrandMutation struct {
	config
	op            Op
	typ           string
	id            *int
	fixbrandname  *string
	clearedFields map[string]struct{}
	fix           map[int]struct{}
	removedfix    map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Fixbrand, error)
}

var _ ent.Mutation = (*FixbrandMutation)(nil)

// fixbrandOption allows to manage the mutation configuration using functional options.
type fixbrandOption func(*FixbrandMutation)

// newFixbrandMutation creates new mutation for $n.Name.
func newFixbrandMutation(c config, op Op, opts ...fixbrandOption) *FixbrandMutation {
	m := &FixbrandMutation{
		config:        c,
		op:            op,
		typ:           TypeFixbrand,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFixbrandID sets the id field of the mutation.
func withFixbrandID(id int) fixbrandOption {
	return func(m *FixbrandMutation) {
		var (
			err   error
			once  sync.Once
			value *Fixbrand
		)
		m.oldValue = func(ctx context.Context) (*Fixbrand, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fixbrand.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFixbrand sets the old Fixbrand of the mutation.
func withFixbrand(node *Fixbrand) fixbrandOption {
	return func(m *FixbrandMutation) {
		m.oldValue = func(context.Context) (*Fixbrand, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FixbrandMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FixbrandMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FixbrandMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFixbrandname sets the fixbrandname field.
func (m *FixbrandMutation) SetFixbrandname(s string) {
	m.fixbrandname = &s
}

// Fixbrandname returns the fixbrandname value in the mutation.
func (m *FixbrandMutation) Fixbrandname() (r string, exists bool) {
	v := m.fixbrandname
	if v == nil {
		return
	}
	return *v, true
}

// OldFixbrandname returns the old fixbrandname value of the Fixbrand.
// If the Fixbrand object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixbrandMutation) OldFixbrandname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFixbrandname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFixbrandname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixbrandname: %w", err)
	}
	return oldValue.Fixbrandname, nil
}

// ResetFixbrandname reset all changes of the "fixbrandname" field.
func (m *FixbrandMutation) ResetFixbrandname() {
	m.fixbrandname = nil
}

// AddFixIDs adds the fix edge to Fix by ids.
func (m *FixbrandMutation) AddFixIDs(ids ...int) {
	if m.fix == nil {
		m.fix = make(map[int]struct{})
	}
	for i := range ids {
		m.fix[ids[i]] = struct{}{}
	}
}

// RemoveFixIDs removes the fix edge to Fix by ids.
func (m *FixbrandMutation) RemoveFixIDs(ids ...int) {
	if m.removedfix == nil {
		m.removedfix = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfix[ids[i]] = struct{}{}
	}
}

// RemovedFix returns the removed ids of fix.
func (m *FixbrandMutation) RemovedFixIDs() (ids []int) {
	for id := range m.removedfix {
		ids = append(ids, id)
	}
	return
}

// FixIDs returns the fix ids in the mutation.
func (m *FixbrandMutation) FixIDs() (ids []int) {
	for id := range m.fix {
		ids = append(ids, id)
	}
	return
}

// ResetFix reset all changes of the "fix" edge.
func (m *FixbrandMutation) ResetFix() {
	m.fix = nil
	m.removedfix = nil
}

// Op returns the operation name.
func (m *FixbrandMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fixbrand).
func (m *FixbrandMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FixbrandMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.fixbrandname != nil {
		fields = append(fields, fixbrand.FieldFixbrandname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FixbrandMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fixbrand.FieldFixbrandname:
		return m.Fixbrandname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FixbrandMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fixbrand.FieldFixbrandname:
		return m.OldFixbrandname(ctx)
	}
	return nil, fmt.Errorf("unknown Fixbrand field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixbrandMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fixbrand.FieldFixbrandname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixbrandname(v)
		return nil
	}
	return fmt.Errorf("unknown Fixbrand field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FixbrandMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FixbrandMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixbrandMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fixbrand numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FixbrandMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FixbrandMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FixbrandMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fixbrand nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FixbrandMutation) ResetField(name string) error {
	switch name {
	case fixbrand.FieldFixbrandname:
		m.ResetFixbrandname()
		return nil
	}
	return fmt.Errorf("unknown Fixbrand field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FixbrandMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.fix != nil {
		edges = append(edges, fixbrand.EdgeFix)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FixbrandMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fixbrand.EdgeFix:
		ids := make([]ent.Value, 0, len(m.fix))
		for id := range m.fix {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FixbrandMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfix != nil {
		edges = append(edges, fixbrand.EdgeFix)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FixbrandMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fixbrand.EdgeFix:
		ids := make([]ent.Value, 0, len(m.removedfix))
		for id := range m.removedfix {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FixbrandMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FixbrandMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FixbrandMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Fixbrand unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FixbrandMutation) ResetEdge(name string) error {
	switch name {
	case fixbrand.EdgeFix:
		m.ResetFix()
		return nil
	}
	return fmt.Errorf("unknown Fixbrand edge %s", name)
}

// FixcomtypeMutation represents an operation that mutate the Fixcomtypes
// nodes in the graph.
type FixcomtypeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	fixcomtypename *string
	clearedFields  map[string]struct{}
	fix            map[int]struct{}
	removedfix     map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Fixcomtype, error)
}

var _ ent.Mutation = (*FixcomtypeMutation)(nil)

// fixcomtypeOption allows to manage the mutation configuration using functional options.
type fixcomtypeOption func(*FixcomtypeMutation)

// newFixcomtypeMutation creates new mutation for $n.Name.
func newFixcomtypeMutation(c config, op Op, opts ...fixcomtypeOption) *FixcomtypeMutation {
	m := &FixcomtypeMutation{
		config:        c,
		op:            op,
		typ:           TypeFixcomtype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFixcomtypeID sets the id field of the mutation.
func withFixcomtypeID(id int) fixcomtypeOption {
	return func(m *FixcomtypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Fixcomtype
		)
		m.oldValue = func(ctx context.Context) (*Fixcomtype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fixcomtype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFixcomtype sets the old Fixcomtype of the mutation.
func withFixcomtype(node *Fixcomtype) fixcomtypeOption {
	return func(m *FixcomtypeMutation) {
		m.oldValue = func(context.Context) (*Fixcomtype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FixcomtypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FixcomtypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FixcomtypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFixcomtypename sets the fixcomtypename field.
func (m *FixcomtypeMutation) SetFixcomtypename(s string) {
	m.fixcomtypename = &s
}

// Fixcomtypename returns the fixcomtypename value in the mutation.
func (m *FixcomtypeMutation) Fixcomtypename() (r string, exists bool) {
	v := m.fixcomtypename
	if v == nil {
		return
	}
	return *v, true
}

// OldFixcomtypename returns the old fixcomtypename value of the Fixcomtype.
// If the Fixcomtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FixcomtypeMutation) OldFixcomtypename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFixcomtypename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFixcomtypename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFixcomtypename: %w", err)
	}
	return oldValue.Fixcomtypename, nil
}

// ResetFixcomtypename reset all changes of the "fixcomtypename" field.
func (m *FixcomtypeMutation) ResetFixcomtypename() {
	m.fixcomtypename = nil
}

// AddFixIDs adds the fix edge to Fix by ids.
func (m *FixcomtypeMutation) AddFixIDs(ids ...int) {
	if m.fix == nil {
		m.fix = make(map[int]struct{})
	}
	for i := range ids {
		m.fix[ids[i]] = struct{}{}
	}
}

// RemoveFixIDs removes the fix edge to Fix by ids.
func (m *FixcomtypeMutation) RemoveFixIDs(ids ...int) {
	if m.removedfix == nil {
		m.removedfix = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfix[ids[i]] = struct{}{}
	}
}

// RemovedFix returns the removed ids of fix.
func (m *FixcomtypeMutation) RemovedFixIDs() (ids []int) {
	for id := range m.removedfix {
		ids = append(ids, id)
	}
	return
}

// FixIDs returns the fix ids in the mutation.
func (m *FixcomtypeMutation) FixIDs() (ids []int) {
	for id := range m.fix {
		ids = append(ids, id)
	}
	return
}

// ResetFix reset all changes of the "fix" edge.
func (m *FixcomtypeMutation) ResetFix() {
	m.fix = nil
	m.removedfix = nil
}

// Op returns the operation name.
func (m *FixcomtypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fixcomtype).
func (m *FixcomtypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FixcomtypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.fixcomtypename != nil {
		fields = append(fields, fixcomtype.FieldFixcomtypename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FixcomtypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fixcomtype.FieldFixcomtypename:
		return m.Fixcomtypename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FixcomtypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fixcomtype.FieldFixcomtypename:
		return m.OldFixcomtypename(ctx)
	}
	return nil, fmt.Errorf("unknown Fixcomtype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixcomtypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fixcomtype.FieldFixcomtypename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFixcomtypename(v)
		return nil
	}
	return fmt.Errorf("unknown Fixcomtype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FixcomtypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FixcomtypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FixcomtypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fixcomtype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FixcomtypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FixcomtypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FixcomtypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fixcomtype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FixcomtypeMutation) ResetField(name string) error {
	switch name {
	case fixcomtype.FieldFixcomtypename:
		m.ResetFixcomtypename()
		return nil
	}
	return fmt.Errorf("unknown Fixcomtype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FixcomtypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.fix != nil {
		edges = append(edges, fixcomtype.EdgeFix)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FixcomtypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fixcomtype.EdgeFix:
		ids := make([]ent.Value, 0, len(m.fix))
		for id := range m.fix {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FixcomtypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfix != nil {
		edges = append(edges, fixcomtype.EdgeFix)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FixcomtypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fixcomtype.EdgeFix:
		ids := make([]ent.Value, 0, len(m.removedfix))
		for id := range m.removedfix {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FixcomtypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FixcomtypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FixcomtypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Fixcomtype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FixcomtypeMutation) ResetEdge(name string) error {
	switch name {
	case fixcomtype.EdgeFix:
		m.ResetFix()
		return nil
	}
	return fmt.Errorf("unknown Fixcomtype edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Gendername     *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	customer        map[int]struct{}
	removedcustomer map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGendername sets the Gendername field.
func (m *GenderMutation) SetGendername(s string) {
	m._Gendername = &s
}

// Gendername returns the Gendername value in the mutation.
func (m *GenderMutation) Gendername() (r string, exists bool) {
	v := m._Gendername
	if v == nil {
		return
	}
	return *v, true
}

// OldGendername returns the old Gendername value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGendername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGendername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGendername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGendername: %w", err)
	}
	return oldValue.Gendername, nil
}

// ResetGendername reset all changes of the "Gendername" field.
func (m *GenderMutation) ResetGendername() {
	m._Gendername = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *GenderMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *GenderMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *GenderMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *GenderMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *GenderMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// AddCustomerIDs adds the customer edge to Customer by ids.
func (m *GenderMutation) AddCustomerIDs(ids ...int) {
	if m.customer == nil {
		m.customer = make(map[int]struct{})
	}
	for i := range ids {
		m.customer[ids[i]] = struct{}{}
	}
}

// RemoveCustomerIDs removes the customer edge to Customer by ids.
func (m *GenderMutation) RemoveCustomerIDs(ids ...int) {
	if m.removedcustomer == nil {
		m.removedcustomer = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer[ids[i]] = struct{}{}
	}
}

// RemovedCustomer returns the removed ids of customer.
func (m *GenderMutation) RemovedCustomerIDs() (ids []int) {
	for id := range m.removedcustomer {
		ids = append(ids, id)
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
func (m *GenderMutation) CustomerIDs() (ids []int) {
	for id := range m.customer {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *GenderMutation) ResetCustomer() {
	m.customer = nil
	m.removedcustomer = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Gendername != nil {
		fields = append(fields, gender.FieldGendername)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGendername:
		return m.Gendername()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGendername:
		return m.OldGendername(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGendername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGendername(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGendername:
		m.ResetGendername()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.personal != nil {
		edges = append(edges, gender.EdgePersonal)
	}
	if m.customer != nil {
		edges = append(edges, gender.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	case gender.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.customer))
		for id := range m.customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpersonal != nil {
		edges = append(edges, gender.EdgePersonal)
	}
	if m.removedcustomer != nil {
		edges = append(edges, gender.EdgeCustomer)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	case gender.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.removedcustomer))
		for id := range m.removedcustomer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePersonal:
		m.ResetPersonal()
		return nil
	case gender.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// PaymentTypeMutation represents an operation that mutate the PaymentTypes
// nodes in the graph.
type PaymentTypeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Typename      *string
	clearedFields  map[string]struct{}
	receipt        map[int]struct{}
	removedreceipt map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*PaymentType, error)
}

var _ ent.Mutation = (*PaymentTypeMutation)(nil)

// paymenttypeOption allows to manage the mutation configuration using functional options.
type paymenttypeOption func(*PaymentTypeMutation)

// newPaymentTypeMutation creates new mutation for $n.Name.
func newPaymentTypeMutation(c config, op Op, opts ...paymenttypeOption) *PaymentTypeMutation {
	m := &PaymentTypeMutation{
		config:        c,
		op:            op,
		typ:           TypePaymentType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentTypeID sets the id field of the mutation.
func withPaymentTypeID(id int) paymenttypeOption {
	return func(m *PaymentTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *PaymentType
		)
		m.oldValue = func(ctx context.Context) (*PaymentType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PaymentType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPaymentType sets the old PaymentType of the mutation.
func withPaymentType(node *PaymentType) paymenttypeOption {
	return func(m *PaymentTypeMutation) {
		m.oldValue = func(context.Context) (*PaymentType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PaymentTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTypename sets the Typename field.
func (m *PaymentTypeMutation) SetTypename(s string) {
	m._Typename = &s
}

// Typename returns the Typename value in the mutation.
func (m *PaymentTypeMutation) Typename() (r string, exists bool) {
	v := m._Typename
	if v == nil {
		return
	}
	return *v, true
}

// OldTypename returns the old Typename value of the PaymentType.
// If the PaymentType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PaymentTypeMutation) OldTypename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypename: %w", err)
	}
	return oldValue.Typename, nil
}

// ResetTypename reset all changes of the "Typename" field.
func (m *PaymentTypeMutation) ResetTypename() {
	m._Typename = nil
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (m *PaymentTypeMutation) AddReceiptIDs(ids ...int) {
	if m.receipt == nil {
		m.receipt = make(map[int]struct{})
	}
	for i := range ids {
		m.receipt[ids[i]] = struct{}{}
	}
}

// RemoveReceiptIDs removes the receipt edge to Receipt by ids.
func (m *PaymentTypeMutation) RemoveReceiptIDs(ids ...int) {
	if m.removedreceipt == nil {
		m.removedreceipt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedreceipt[ids[i]] = struct{}{}
	}
}

// RemovedReceipt returns the removed ids of receipt.
func (m *PaymentTypeMutation) RemovedReceiptIDs() (ids []int) {
	for id := range m.removedreceipt {
		ids = append(ids, id)
	}
	return
}

// ReceiptIDs returns the receipt ids in the mutation.
func (m *PaymentTypeMutation) ReceiptIDs() (ids []int) {
	for id := range m.receipt {
		ids = append(ids, id)
	}
	return
}

// ResetReceipt reset all changes of the "receipt" edge.
func (m *PaymentTypeMutation) ResetReceipt() {
	m.receipt = nil
	m.removedreceipt = nil
}

// Op returns the operation name.
func (m *PaymentTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PaymentType).
func (m *PaymentTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PaymentTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Typename != nil {
		fields = append(fields, paymenttype.FieldTypename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PaymentTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case paymenttype.FieldTypename:
		return m.Typename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PaymentTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case paymenttype.FieldTypename:
		return m.OldTypename(ctx)
	}
	return nil, fmt.Errorf("unknown PaymentType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PaymentTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case paymenttype.FieldTypename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypename(v)
		return nil
	}
	return fmt.Errorf("unknown PaymentType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PaymentTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PaymentTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PaymentTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PaymentType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PaymentTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PaymentTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PaymentType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PaymentTypeMutation) ResetField(name string) error {
	switch name {
	case paymenttype.FieldTypename:
		m.ResetTypename()
		return nil
	}
	return fmt.Errorf("unknown PaymentType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PaymentTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.receipt != nil {
		edges = append(edges, paymenttype.EdgeReceipt)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PaymentTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case paymenttype.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.receipt))
		for id := range m.receipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PaymentTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedreceipt != nil {
		edges = append(edges, paymenttype.EdgeReceipt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PaymentTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case paymenttype.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.removedreceipt))
		for id := range m.removedreceipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PaymentTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PaymentTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PaymentTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PaymentType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PaymentTypeMutation) ResetEdge(name string) error {
	switch name {
	case paymenttype.EdgeReceipt:
		m.ResetReceipt()
		return nil
	}
	return fmt.Errorf("unknown PaymentType edge %s", name)
}

// PersonalMutation represents an operation that mutate the Personals
// nodes in the graph.
type PersonalMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Personalname     *string
	_Email            *string
	_Password         *string
	clearedFields     map[string]struct{}
	customer          map[int]struct{}
	removedcustomer   map[int]struct{}
	title             *int
	clearedtitle      bool
	department        *int
	cleareddepartment bool
	gender            *int
	clearedgender     bool
	product           map[int]struct{}
	removedproduct    map[int]struct{}
	fix               map[int]struct{}
	removedfix        map[int]struct{}
	personal          map[int]struct{}
	removedpersonal   map[int]struct{}
	receipt           map[int]struct{}
	removedreceipt    map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Personal, error)
}

var _ ent.Mutation = (*PersonalMutation)(nil)

// personalOption allows to manage the mutation configuration using functional options.
type personalOption func(*PersonalMutation)

// newPersonalMutation creates new mutation for $n.Name.
func newPersonalMutation(c config, op Op, opts ...personalOption) *PersonalMutation {
	m := &PersonalMutation{
		config:        c,
		op:            op,
		typ:           TypePersonal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonalID sets the id field of the mutation.
func withPersonalID(id int) personalOption {
	return func(m *PersonalMutation) {
		var (
			err   error
			once  sync.Once
			value *Personal
		)
		m.oldValue = func(ctx context.Context) (*Personal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Personal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonal sets the old Personal of the mutation.
func withPersonal(node *Personal) personalOption {
	return func(m *PersonalMutation) {
		m.oldValue = func(context.Context) (*Personal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PersonalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPersonalname sets the Personalname field.
func (m *PersonalMutation) SetPersonalname(s string) {
	m._Personalname = &s
}

// Personalname returns the Personalname value in the mutation.
func (m *PersonalMutation) Personalname() (r string, exists bool) {
	v := m._Personalname
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonalname returns the old Personalname value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldPersonalname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPersonalname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPersonalname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonalname: %w", err)
	}
	return oldValue.Personalname, nil
}

// ResetPersonalname reset all changes of the "Personalname" field.
func (m *PersonalMutation) ResetPersonalname() {
	m._Personalname = nil
}

// SetEmail sets the Email field.
func (m *PersonalMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *PersonalMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *PersonalMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the Password field.
func (m *PersonalMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *PersonalMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Personal.
// If the Personal object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PersonalMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *PersonalMutation) ResetPassword() {
	m._Password = nil
}

// AddCustomerIDs adds the customer edge to Customer by ids.
func (m *PersonalMutation) AddCustomerIDs(ids ...int) {
	if m.customer == nil {
		m.customer = make(map[int]struct{})
	}
	for i := range ids {
		m.customer[ids[i]] = struct{}{}
	}
}

// RemoveCustomerIDs removes the customer edge to Customer by ids.
func (m *PersonalMutation) RemoveCustomerIDs(ids ...int) {
	if m.removedcustomer == nil {
		m.removedcustomer = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer[ids[i]] = struct{}{}
	}
}

// RemovedCustomer returns the removed ids of customer.
func (m *PersonalMutation) RemovedCustomerIDs() (ids []int) {
	for id := range m.removedcustomer {
		ids = append(ids, id)
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
func (m *PersonalMutation) CustomerIDs() (ids []int) {
	for id := range m.customer {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *PersonalMutation) ResetCustomer() {
	m.customer = nil
	m.removedcustomer = nil
}

// SetTitleID sets the title edge to Title by id.
func (m *PersonalMutation) SetTitleID(id int) {
	m.title = &id
}

// ClearTitle clears the title edge to Title.
func (m *PersonalMutation) ClearTitle() {
	m.clearedtitle = true
}

// TitleCleared returns if the edge title was cleared.
func (m *PersonalMutation) TitleCleared() bool {
	return m.clearedtitle
}

// TitleID returns the title id in the mutation.
func (m *PersonalMutation) TitleID() (id int, exists bool) {
	if m.title != nil {
		return *m.title, true
	}
	return
}

// TitleIDs returns the title ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TitleID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) TitleIDs() (ids []int) {
	if id := m.title; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTitle reset all changes of the "title" edge.
func (m *PersonalMutation) ResetTitle() {
	m.title = nil
	m.clearedtitle = false
}

// SetDepartmentID sets the department edge to Department by id.
func (m *PersonalMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *PersonalMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *PersonalMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *PersonalMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *PersonalMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PersonalMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PersonalMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PersonalMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PersonalMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PersonalMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PersonalMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// AddProductIDs adds the product edge to Product by ids.
func (m *PersonalMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// RemoveProductIDs removes the product edge to Product by ids.
func (m *PersonalMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed ids of product.
func (m *PersonalMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the product ids in the mutation.
func (m *PersonalMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *PersonalMutation) ResetProduct() {
	m.product = nil
	m.removedproduct = nil
}

// AddFixIDs adds the fix edge to Fix by ids.
func (m *PersonalMutation) AddFixIDs(ids ...int) {
	if m.fix == nil {
		m.fix = make(map[int]struct{})
	}
	for i := range ids {
		m.fix[ids[i]] = struct{}{}
	}
}

// RemoveFixIDs removes the fix edge to Fix by ids.
func (m *PersonalMutation) RemoveFixIDs(ids ...int) {
	if m.removedfix == nil {
		m.removedfix = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfix[ids[i]] = struct{}{}
	}
}

// RemovedFix returns the removed ids of fix.
func (m *PersonalMutation) RemovedFixIDs() (ids []int) {
	for id := range m.removedfix {
		ids = append(ids, id)
	}
	return
}

// FixIDs returns the fix ids in the mutation.
func (m *PersonalMutation) FixIDs() (ids []int) {
	for id := range m.fix {
		ids = append(ids, id)
	}
	return
}

// ResetFix reset all changes of the "fix" edge.
func (m *PersonalMutation) ResetFix() {
	m.fix = nil
	m.removedfix = nil
}

// AddPersonalIDs adds the personal edge to Adminrepair by ids.
func (m *PersonalMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Adminrepair by ids.
func (m *PersonalMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *PersonalMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *PersonalMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *PersonalMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (m *PersonalMutation) AddReceiptIDs(ids ...int) {
	if m.receipt == nil {
		m.receipt = make(map[int]struct{})
	}
	for i := range ids {
		m.receipt[ids[i]] = struct{}{}
	}
}

// RemoveReceiptIDs removes the receipt edge to Receipt by ids.
func (m *PersonalMutation) RemoveReceiptIDs(ids ...int) {
	if m.removedreceipt == nil {
		m.removedreceipt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedreceipt[ids[i]] = struct{}{}
	}
}

// RemovedReceipt returns the removed ids of receipt.
func (m *PersonalMutation) RemovedReceiptIDs() (ids []int) {
	for id := range m.removedreceipt {
		ids = append(ids, id)
	}
	return
}

// ReceiptIDs returns the receipt ids in the mutation.
func (m *PersonalMutation) ReceiptIDs() (ids []int) {
	for id := range m.receipt {
		ids = append(ids, id)
	}
	return
}

// ResetReceipt reset all changes of the "receipt" edge.
func (m *PersonalMutation) ResetReceipt() {
	m.receipt = nil
	m.removedreceipt = nil
}

// Op returns the operation name.
func (m *PersonalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Personal).
func (m *PersonalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PersonalMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Personalname != nil {
		fields = append(fields, personal.FieldPersonalname)
	}
	if m._Email != nil {
		fields = append(fields, personal.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, personal.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PersonalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personal.FieldPersonalname:
		return m.Personalname()
	case personal.FieldEmail:
		return m.Email()
	case personal.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PersonalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personal.FieldPersonalname:
		return m.OldPersonalname(ctx)
	case personal.FieldEmail:
		return m.OldEmail(ctx)
	case personal.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Personal field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personal.FieldPersonalname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonalname(v)
		return nil
	case personal.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case personal.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Personal field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PersonalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PersonalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PersonalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Personal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PersonalMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PersonalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonalMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Personal nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PersonalMutation) ResetField(name string) error {
	switch name {
	case personal.FieldPersonalname:
		m.ResetPersonalname()
		return nil
	case personal.FieldEmail:
		m.ResetEmail()
		return nil
	case personal.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Personal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PersonalMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.customer != nil {
		edges = append(edges, personal.EdgeCustomer)
	}
	if m.title != nil {
		edges = append(edges, personal.EdgeTitle)
	}
	if m.department != nil {
		edges = append(edges, personal.EdgeDepartment)
	}
	if m.gender != nil {
		edges = append(edges, personal.EdgeGender)
	}
	if m.product != nil {
		edges = append(edges, personal.EdgeProduct)
	}
	if m.fix != nil {
		edges = append(edges, personal.EdgeFix)
	}
	if m.personal != nil {
		edges = append(edges, personal.EdgePersonal)
	}
	if m.receipt != nil {
		edges = append(edges, personal.EdgeReceipt)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PersonalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personal.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.customer))
		for id := range m.customer {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeTitle:
		if id := m.title; id != nil {
			return []ent.Value{*id}
		}
	case personal.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case personal.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case personal.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeFix:
		ids := make([]ent.Value, 0, len(m.fix))
		for id := range m.fix {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.receipt))
		for id := range m.receipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PersonalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedcustomer != nil {
		edges = append(edges, personal.EdgeCustomer)
	}
	if m.removedproduct != nil {
		edges = append(edges, personal.EdgeProduct)
	}
	if m.removedfix != nil {
		edges = append(edges, personal.EdgeFix)
	}
	if m.removedpersonal != nil {
		edges = append(edges, personal.EdgePersonal)
	}
	if m.removedreceipt != nil {
		edges = append(edges, personal.EdgeReceipt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PersonalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case personal.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.removedcustomer))
		for id := range m.removedcustomer {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeFix:
		ids := make([]ent.Value, 0, len(m.removedfix))
		for id := range m.removedfix {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	case personal.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.removedreceipt))
		for id := range m.removedreceipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PersonalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedtitle {
		edges = append(edges, personal.EdgeTitle)
	}
	if m.cleareddepartment {
		edges = append(edges, personal.EdgeDepartment)
	}
	if m.clearedgender {
		edges = append(edges, personal.EdgeGender)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PersonalMutation) EdgeCleared(name string) bool {
	switch name {
	case personal.EdgeTitle:
		return m.clearedtitle
	case personal.EdgeDepartment:
		return m.cleareddepartment
	case personal.EdgeGender:
		return m.clearedgender
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PersonalMutation) ClearEdge(name string) error {
	switch name {
	case personal.EdgeTitle:
		m.ClearTitle()
		return nil
	case personal.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case personal.EdgeGender:
		m.ClearGender()
		return nil
	}
	return fmt.Errorf("unknown Personal unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PersonalMutation) ResetEdge(name string) error {
	switch name {
	case personal.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case personal.EdgeTitle:
		m.ResetTitle()
		return nil
	case personal.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case personal.EdgeGender:
		m.ResetGender()
		return nil
	case personal.EdgeProduct:
		m.ResetProduct()
		return nil
	case personal.EdgeFix:
		m.ResetFix()
		return nil
	case personal.EdgePersonal:
		m.ResetPersonal()
		return nil
	case personal.EdgeReceipt:
		m.ResetReceipt()
		return nil
	}
	return fmt.Errorf("unknown Personal edge %s", name)
}

// ProductMutation represents an operation that mutate the Products
// nodes in the graph.
type ProductMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_Productname       *string
	_Numberofproduct   *string
	_Price             *string
	clearedFields      map[string]struct{}
	product            map[int]struct{}
	removedproduct     map[int]struct{}
	brand              *int
	clearedbrand       bool
	typeproduct        *int
	clearedtypeproduct bool
	personal           *int
	clearedpersonal    bool
	receipt            map[int]struct{}
	removedreceipt     map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*Product, error)
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows to manage the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for $n.Name.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the id field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProductname sets the Productname field.
func (m *ProductMutation) SetProductname(s string) {
	m._Productname = &s
}

// Productname returns the Productname value in the mutation.
func (m *ProductMutation) Productname() (r string, exists bool) {
	v := m._Productname
	if v == nil {
		return
	}
	return *v, true
}

// OldProductname returns the old Productname value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldProductname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductname: %w", err)
	}
	return oldValue.Productname, nil
}

// ResetProductname reset all changes of the "Productname" field.
func (m *ProductMutation) ResetProductname() {
	m._Productname = nil
}

// SetNumberofproduct sets the Numberofproduct field.
func (m *ProductMutation) SetNumberofproduct(s string) {
	m._Numberofproduct = &s
}

// Numberofproduct returns the Numberofproduct value in the mutation.
func (m *ProductMutation) Numberofproduct() (r string, exists bool) {
	v := m._Numberofproduct
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberofproduct returns the old Numberofproduct value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldNumberofproduct(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumberofproduct is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumberofproduct requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberofproduct: %w", err)
	}
	return oldValue.Numberofproduct, nil
}

// ResetNumberofproduct reset all changes of the "Numberofproduct" field.
func (m *ProductMutation) ResetNumberofproduct() {
	m._Numberofproduct = nil
}

// SetPrice sets the Price field.
func (m *ProductMutation) SetPrice(s string) {
	m._Price = &s
}

// Price returns the Price value in the mutation.
func (m *ProductMutation) Price() (r string, exists bool) {
	v := m._Price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old Price value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// ResetPrice reset all changes of the "Price" field.
func (m *ProductMutation) ResetPrice() {
	m._Price = nil
}

// AddProductIDs adds the product edge to Adminrepair by ids.
func (m *ProductMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// RemoveProductIDs removes the product edge to Adminrepair by ids.
func (m *ProductMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed ids of product.
func (m *ProductMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the product ids in the mutation.
func (m *ProductMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *ProductMutation) ResetProduct() {
	m.product = nil
	m.removedproduct = nil
}

// SetBrandID sets the brand edge to Brand by id.
func (m *ProductMutation) SetBrandID(id int) {
	m.brand = &id
}

// ClearBrand clears the brand edge to Brand.
func (m *ProductMutation) ClearBrand() {
	m.clearedbrand = true
}

// BrandCleared returns if the edge brand was cleared.
func (m *ProductMutation) BrandCleared() bool {
	return m.clearedbrand
}

// BrandID returns the brand id in the mutation.
func (m *ProductMutation) BrandID() (id int, exists bool) {
	if m.brand != nil {
		return *m.brand, true
	}
	return
}

// BrandIDs returns the brand ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BrandID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) BrandIDs() (ids []int) {
	if id := m.brand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBrand reset all changes of the "brand" edge.
func (m *ProductMutation) ResetBrand() {
	m.brand = nil
	m.clearedbrand = false
}

// SetTypeproductID sets the typeproduct edge to Typeproduct by id.
func (m *ProductMutation) SetTypeproductID(id int) {
	m.typeproduct = &id
}

// ClearTypeproduct clears the typeproduct edge to Typeproduct.
func (m *ProductMutation) ClearTypeproduct() {
	m.clearedtypeproduct = true
}

// TypeproductCleared returns if the edge typeproduct was cleared.
func (m *ProductMutation) TypeproductCleared() bool {
	return m.clearedtypeproduct
}

// TypeproductID returns the typeproduct id in the mutation.
func (m *ProductMutation) TypeproductID() (id int, exists bool) {
	if m.typeproduct != nil {
		return *m.typeproduct, true
	}
	return
}

// TypeproductIDs returns the typeproduct ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// TypeproductID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) TypeproductIDs() (ids []int) {
	if id := m.typeproduct; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTypeproduct reset all changes of the "typeproduct" edge.
func (m *ProductMutation) ResetTypeproduct() {
	m.typeproduct = nil
	m.clearedtypeproduct = false
}

// SetPersonalID sets the personal edge to Personal by id.
func (m *ProductMutation) SetPersonalID(id int) {
	m.personal = &id
}

// ClearPersonal clears the personal edge to Personal.
func (m *ProductMutation) ClearPersonal() {
	m.clearedpersonal = true
}

// PersonalCleared returns if the edge personal was cleared.
func (m *ProductMutation) PersonalCleared() bool {
	return m.clearedpersonal
}

// PersonalID returns the personal id in the mutation.
func (m *ProductMutation) PersonalID() (id int, exists bool) {
	if m.personal != nil {
		return *m.personal, true
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PersonalID instead. It exists only for internal usage by the builders.
func (m *ProductMutation) PersonalIDs() (ids []int) {
	if id := m.personal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *ProductMutation) ResetPersonal() {
	m.personal = nil
	m.clearedpersonal = false
}

// AddReceiptIDs adds the receipt edge to Receipt by ids.
func (m *ProductMutation) AddReceiptIDs(ids ...int) {
	if m.receipt == nil {
		m.receipt = make(map[int]struct{})
	}
	for i := range ids {
		m.receipt[ids[i]] = struct{}{}
	}
}

// RemoveReceiptIDs removes the receipt edge to Receipt by ids.
func (m *ProductMutation) RemoveReceiptIDs(ids ...int) {
	if m.removedreceipt == nil {
		m.removedreceipt = make(map[int]struct{})
	}
	for i := range ids {
		m.removedreceipt[ids[i]] = struct{}{}
	}
}

// RemovedReceipt returns the removed ids of receipt.
func (m *ProductMutation) RemovedReceiptIDs() (ids []int) {
	for id := range m.removedreceipt {
		ids = append(ids, id)
	}
	return
}

// ReceiptIDs returns the receipt ids in the mutation.
func (m *ProductMutation) ReceiptIDs() (ids []int) {
	for id := range m.receipt {
		ids = append(ids, id)
	}
	return
}

// ResetReceipt reset all changes of the "receipt" edge.
func (m *ProductMutation) ResetReceipt() {
	m.receipt = nil
	m.removedreceipt = nil
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Productname != nil {
		fields = append(fields, product.FieldProductname)
	}
	if m._Numberofproduct != nil {
		fields = append(fields, product.FieldNumberofproduct)
	}
	if m._Price != nil {
		fields = append(fields, product.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldProductname:
		return m.Productname()
	case product.FieldNumberofproduct:
		return m.Numberofproduct()
	case product.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldProductname:
		return m.OldProductname(ctx)
	case product.FieldNumberofproduct:
		return m.OldNumberofproduct(ctx)
	case product.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldProductname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductname(v)
		return nil
	case product.FieldNumberofproduct:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberofproduct(v)
		return nil
	case product.FieldPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldProductname:
		m.ResetProductname()
		return nil
	case product.FieldNumberofproduct:
		m.ResetNumberofproduct()
		return nil
	case product.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.product != nil {
		edges = append(edges, product.EdgeProduct)
	}
	if m.brand != nil {
		edges = append(edges, product.EdgeBrand)
	}
	if m.typeproduct != nil {
		edges = append(edges, product.EdgeTypeproduct)
	}
	if m.personal != nil {
		edges = append(edges, product.EdgePersonal)
	}
	if m.receipt != nil {
		edges = append(edges, product.EdgeReceipt)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeBrand:
		if id := m.brand; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgeTypeproduct:
		if id := m.typeproduct; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgePersonal:
		if id := m.personal; id != nil {
			return []ent.Value{*id}
		}
	case product.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.receipt))
		for id := range m.receipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedproduct != nil {
		edges = append(edges, product.EdgeProduct)
	}
	if m.removedreceipt != nil {
		edges = append(edges, product.EdgeReceipt)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeReceipt:
		ids := make([]ent.Value, 0, len(m.removedreceipt))
		for id := range m.removedreceipt {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedbrand {
		edges = append(edges, product.EdgeBrand)
	}
	if m.clearedtypeproduct {
		edges = append(edges, product.EdgeTypeproduct)
	}
	if m.clearedpersonal {
		edges = append(edges, product.EdgePersonal)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeBrand:
		return m.clearedbrand
	case product.EdgeTypeproduct:
		return m.clearedtypeproduct
	case product.EdgePersonal:
		return m.clearedpersonal
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	case product.EdgeBrand:
		m.ClearBrand()
		return nil
	case product.EdgeTypeproduct:
		m.ClearTypeproduct()
		return nil
	case product.EdgePersonal:
		m.ClearPersonal()
		return nil
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeProduct:
		m.ResetProduct()
		return nil
	case product.EdgeBrand:
		m.ResetBrand()
		return nil
	case product.EdgeTypeproduct:
		m.ResetTypeproduct()
		return nil
	case product.EdgePersonal:
		m.ResetPersonal()
		return nil
	case product.EdgeReceipt:
		m.ResetReceipt()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// ReceiptMutation represents an operation that mutate the Receipts
// nodes in the graph.
type ReceiptMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	added_time         *time.Time
	_Serviceprovider   *string
	_Address           *string
	_Productname       *string
	_Receiptcode       *string
	clearedFields      map[string]struct{}
	paymenttype        *int
	clearedpaymenttype bool
	adminrepair        *int
	clearedadminrepair bool
	personal           *int
	clearedpersonal    bool
	customer           *int
	clearedcustomer    bool
	product            *int
	clearedproduct     bool
	done               bool
	oldValue           func(context.Context) (*Receipt, error)
}

var _ ent.Mutation = (*ReceiptMutation)(nil)

// receiptOption allows to manage the mutation configuration using functional options.
type receiptOption func(*ReceiptMutation)

// newReceiptMutation creates new mutation for $n.Name.
func newReceiptMutation(c config, op Op, opts ...receiptOption) *ReceiptMutation {
	m := &ReceiptMutation{
		config:        c,
		op:            op,
		typ:           TypeReceipt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReceiptID sets the id field of the mutation.
func withReceiptID(id int) receiptOption {
	return func(m *ReceiptMutation) {
		var (
			err   error
			once  sync.Once
			value *Receipt
		)
		m.oldValue = func(ctx context.Context) (*Receipt, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Receipt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReceipt sets the old Receipt of the mutation.
func withReceipt(node *Receipt) receiptOption {
	return func(m *ReceiptMutation) {
		m.oldValue = func(context.Context) (*Receipt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReceiptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReceiptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ReceiptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAddedTime sets the added_time field.
func (m *ReceiptMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *ReceiptMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Receipt.
// If the Receipt object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ReceiptMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *ReceiptMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetServiceprovider sets the Serviceprovider field.
func (m *ReceiptMutation) SetServiceprovider(s string) {
	m._Serviceprovider = &s
}

// Serviceprovider returns the Serviceprovider value in the mutation.
func (m *ReceiptMutation) Serviceprovider() (r string, exists bool) {
	v := m._Serviceprovider
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceprovider returns the old Serviceprovider value of the Receipt.
// If the Receipt object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ReceiptMutation) OldServiceprovider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldServiceprovider is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldServiceprovider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceprovider: %w", err)
	}
	return oldValue.Serviceprovider, nil
}

// ResetServiceprovider reset all changes of the "Serviceprovider" field.
func (m *ReceiptMutation) ResetServiceprovider() {
	m._Serviceprovider = nil
}

// SetAddress sets the Address field.
func (m *ReceiptMutation) SetAddress(s string) {
	m._Address = &s
}

// Address returns the Address value in the mutation.
func (m *ReceiptMutation) Address() (r string, exists bool) {
	v := m._Address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old Address value of the Receipt.
// If the Receipt object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ReceiptMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "Address" field.
func (m *ReceiptMutation) ResetAddress() {
	m._Address = nil
}

// SetProductname sets the Productname field.
func (m *ReceiptMutation) SetProductname(s string) {
	m._Productname = &s
}

// Productname returns the Productname value in the mutation.
func (m *ReceiptMutation) Productname() (r string, exists bool) {
	v := m._Productname
	if v == nil {
		return
	}
	return *v, true
}

// OldProductname returns the old Productname value of the Receipt.
// If the Receipt object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ReceiptMutation) OldProductname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductname: %w", err)
	}
	return oldValue.Productname, nil
}

// ResetProductname reset all changes of the "Productname" field.
func (m *ReceiptMutation) ResetProductname() {
	m._Productname = nil
}

// SetReceiptcode sets the Receiptcode field.
func (m *ReceiptMutation) SetReceiptcode(s string) {
	m._Receiptcode = &s
}

// Receiptcode returns the Receiptcode value in the mutation.
func (m *ReceiptMutation) Receiptcode() (r string, exists bool) {
	v := m._Receiptcode
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiptcode returns the old Receiptcode value of the Receipt.
// If the Receipt object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ReceiptMutation) OldReceiptcode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReceiptcode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReceiptcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiptcode: %w", err)
	}
	return oldValue.Receiptcode, nil
}

// ResetReceiptcode reset all changes of the "Receiptcode" field.
func (m *ReceiptMutation) ResetReceiptcode() {
	m._Receiptcode = nil
}

// SetPaymenttypeID sets the paymenttype edge to PaymentType by id.
func (m *ReceiptMutation) SetPaymenttypeID(id int) {
	m.paymenttype = &id
}

// ClearPaymenttype clears the paymenttype edge to PaymentType.
func (m *ReceiptMutation) ClearPaymenttype() {
	m.clearedpaymenttype = true
}

// PaymenttypeCleared returns if the edge paymenttype was cleared.
func (m *ReceiptMutation) PaymenttypeCleared() bool {
	return m.clearedpaymenttype
}

// PaymenttypeID returns the paymenttype id in the mutation.
func (m *ReceiptMutation) PaymenttypeID() (id int, exists bool) {
	if m.paymenttype != nil {
		return *m.paymenttype, true
	}
	return
}

// PaymenttypeIDs returns the paymenttype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PaymenttypeID instead. It exists only for internal usage by the builders.
func (m *ReceiptMutation) PaymenttypeIDs() (ids []int) {
	if id := m.paymenttype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPaymenttype reset all changes of the "paymenttype" edge.
func (m *ReceiptMutation) ResetPaymenttype() {
	m.paymenttype = nil
	m.clearedpaymenttype = false
}

// SetAdminrepairID sets the adminrepair edge to Adminrepair by id.
func (m *ReceiptMutation) SetAdminrepairID(id int) {
	m.adminrepair = &id
}

// ClearAdminrepair clears the adminrepair edge to Adminrepair.
func (m *ReceiptMutation) ClearAdminrepair() {
	m.clearedadminrepair = true
}

// AdminrepairCleared returns if the edge adminrepair was cleared.
func (m *ReceiptMutation) AdminrepairCleared() bool {
	return m.clearedadminrepair
}

// AdminrepairID returns the adminrepair id in the mutation.
func (m *ReceiptMutation) AdminrepairID() (id int, exists bool) {
	if m.adminrepair != nil {
		return *m.adminrepair, true
	}
	return
}

// AdminrepairIDs returns the adminrepair ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AdminrepairID instead. It exists only for internal usage by the builders.
func (m *ReceiptMutation) AdminrepairIDs() (ids []int) {
	if id := m.adminrepair; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAdminrepair reset all changes of the "adminrepair" edge.
func (m *ReceiptMutation) ResetAdminrepair() {
	m.adminrepair = nil
	m.clearedadminrepair = false
}

// SetPersonalID sets the personal edge to Personal by id.
func (m *ReceiptMutation) SetPersonalID(id int) {
	m.personal = &id
}

// ClearPersonal clears the personal edge to Personal.
func (m *ReceiptMutation) ClearPersonal() {
	m.clearedpersonal = true
}

// PersonalCleared returns if the edge personal was cleared.
func (m *ReceiptMutation) PersonalCleared() bool {
	return m.clearedpersonal
}

// PersonalID returns the personal id in the mutation.
func (m *ReceiptMutation) PersonalID() (id int, exists bool) {
	if m.personal != nil {
		return *m.personal, true
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PersonalID instead. It exists only for internal usage by the builders.
func (m *ReceiptMutation) PersonalIDs() (ids []int) {
	if id := m.personal; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *ReceiptMutation) ResetPersonal() {
	m.personal = nil
	m.clearedpersonal = false
}

// SetCustomerID sets the customer edge to Customer by id.
func (m *ReceiptMutation) SetCustomerID(id int) {
	m.customer = &id
}

// ClearCustomer clears the customer edge to Customer.
func (m *ReceiptMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared returns if the edge customer was cleared.
func (m *ReceiptMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the customer id in the mutation.
func (m *ReceiptMutation) CustomerID() (id int, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *ReceiptMutation) CustomerIDs() (ids []int) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *ReceiptMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// SetProductID sets the product edge to Product by id.
func (m *ReceiptMutation) SetProductID(id int) {
	m.product = &id
}

// ClearProduct clears the product edge to Product.
func (m *ReceiptMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared returns if the edge product was cleared.
func (m *ReceiptMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductID returns the product id in the mutation.
func (m *ReceiptMutation) ProductID() (id int, exists bool) {
	if m.product != nil {
		return *m.product, true
	}
	return
}

// ProductIDs returns the product ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *ReceiptMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *ReceiptMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Op returns the operation name.
func (m *ReceiptMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Receipt).
func (m *ReceiptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ReceiptMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.added_time != nil {
		fields = append(fields, receipt.FieldAddedTime)
	}
	if m._Serviceprovider != nil {
		fields = append(fields, receipt.FieldServiceprovider)
	}
	if m._Address != nil {
		fields = append(fields, receipt.FieldAddress)
	}
	if m._Productname != nil {
		fields = append(fields, receipt.FieldProductname)
	}
	if m._Receiptcode != nil {
		fields = append(fields, receipt.FieldReceiptcode)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ReceiptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case receipt.FieldAddedTime:
		return m.AddedTime()
	case receipt.FieldServiceprovider:
		return m.Serviceprovider()
	case receipt.FieldAddress:
		return m.Address()
	case receipt.FieldProductname:
		return m.Productname()
	case receipt.FieldReceiptcode:
		return m.Receiptcode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ReceiptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case receipt.FieldAddedTime:
		return m.OldAddedTime(ctx)
	case receipt.FieldServiceprovider:
		return m.OldServiceprovider(ctx)
	case receipt.FieldAddress:
		return m.OldAddress(ctx)
	case receipt.FieldProductname:
		return m.OldProductname(ctx)
	case receipt.FieldReceiptcode:
		return m.OldReceiptcode(ctx)
	}
	return nil, fmt.Errorf("unknown Receipt field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ReceiptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case receipt.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	case receipt.FieldServiceprovider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceprovider(v)
		return nil
	case receipt.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case receipt.FieldProductname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductname(v)
		return nil
	case receipt.FieldReceiptcode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiptcode(v)
		return nil
	}
	return fmt.Errorf("unknown Receipt field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ReceiptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ReceiptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ReceiptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Receipt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ReceiptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ReceiptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReceiptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Receipt nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ReceiptMutation) ResetField(name string) error {
	switch name {
	case receipt.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	case receipt.FieldServiceprovider:
		m.ResetServiceprovider()
		return nil
	case receipt.FieldAddress:
		m.ResetAddress()
		return nil
	case receipt.FieldProductname:
		m.ResetProductname()
		return nil
	case receipt.FieldReceiptcode:
		m.ResetReceiptcode()
		return nil
	}
	return fmt.Errorf("unknown Receipt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ReceiptMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.paymenttype != nil {
		edges = append(edges, receipt.EdgePaymenttype)
	}
	if m.adminrepair != nil {
		edges = append(edges, receipt.EdgeAdminrepair)
	}
	if m.personal != nil {
		edges = append(edges, receipt.EdgePersonal)
	}
	if m.customer != nil {
		edges = append(edges, receipt.EdgeCustomer)
	}
	if m.product != nil {
		edges = append(edges, receipt.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ReceiptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case receipt.EdgePaymenttype:
		if id := m.paymenttype; id != nil {
			return []ent.Value{*id}
		}
	case receipt.EdgeAdminrepair:
		if id := m.adminrepair; id != nil {
			return []ent.Value{*id}
		}
	case receipt.EdgePersonal:
		if id := m.personal; id != nil {
			return []ent.Value{*id}
		}
	case receipt.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	case receipt.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ReceiptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ReceiptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ReceiptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedpaymenttype {
		edges = append(edges, receipt.EdgePaymenttype)
	}
	if m.clearedadminrepair {
		edges = append(edges, receipt.EdgeAdminrepair)
	}
	if m.clearedpersonal {
		edges = append(edges, receipt.EdgePersonal)
	}
	if m.clearedcustomer {
		edges = append(edges, receipt.EdgeCustomer)
	}
	if m.clearedproduct {
		edges = append(edges, receipt.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ReceiptMutation) EdgeCleared(name string) bool {
	switch name {
	case receipt.EdgePaymenttype:
		return m.clearedpaymenttype
	case receipt.EdgeAdminrepair:
		return m.clearedadminrepair
	case receipt.EdgePersonal:
		return m.clearedpersonal
	case receipt.EdgeCustomer:
		return m.clearedcustomer
	case receipt.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ReceiptMutation) ClearEdge(name string) error {
	switch name {
	case receipt.EdgePaymenttype:
		m.ClearPaymenttype()
		return nil
	case receipt.EdgeAdminrepair:
		m.ClearAdminrepair()
		return nil
	case receipt.EdgePersonal:
		m.ClearPersonal()
		return nil
	case receipt.EdgeCustomer:
		m.ClearCustomer()
		return nil
	case receipt.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown Receipt unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ReceiptMutation) ResetEdge(name string) error {
	switch name {
	case receipt.EdgePaymenttype:
		m.ResetPaymenttype()
		return nil
	case receipt.EdgeAdminrepair:
		m.ResetAdminrepair()
		return nil
	case receipt.EdgePersonal:
		m.ResetPersonal()
		return nil
	case receipt.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case receipt.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown Receipt edge %s", name)
}

// TitleMutation represents an operation that mutate the Titles
// nodes in the graph.
type TitleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	titlename       *string
	clearedFields   map[string]struct{}
	personal        map[int]struct{}
	removedpersonal map[int]struct{}
	customer        map[int]struct{}
	removedcustomer map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Title, error)
}

var _ ent.Mutation = (*TitleMutation)(nil)

// titleOption allows to manage the mutation configuration using functional options.
type titleOption func(*TitleMutation)

// newTitleMutation creates new mutation for $n.Name.
func newTitleMutation(c config, op Op, opts ...titleOption) *TitleMutation {
	m := &TitleMutation{
		config:        c,
		op:            op,
		typ:           TypeTitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTitleID sets the id field of the mutation.
func withTitleID(id int) titleOption {
	return func(m *TitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Title
		)
		m.oldValue = func(ctx context.Context) (*Title, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Title.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTitle sets the old Title of the mutation.
func withTitle(node *Title) titleOption {
	return func(m *TitleMutation) {
		m.oldValue = func(context.Context) (*Title, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitlename sets the titlename field.
func (m *TitleMutation) SetTitlename(s string) {
	m.titlename = &s
}

// Titlename returns the titlename value in the mutation.
func (m *TitleMutation) Titlename() (r string, exists bool) {
	v := m.titlename
	if v == nil {
		return
	}
	return *v, true
}

// OldTitlename returns the old titlename value of the Title.
// If the Title object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TitleMutation) OldTitlename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitlename is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitlename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitlename: %w", err)
	}
	return oldValue.Titlename, nil
}

// ResetTitlename reset all changes of the "titlename" field.
func (m *TitleMutation) ResetTitlename() {
	m.titlename = nil
}

// AddPersonalIDs adds the personal edge to Personal by ids.
func (m *TitleMutation) AddPersonalIDs(ids ...int) {
	if m.personal == nil {
		m.personal = make(map[int]struct{})
	}
	for i := range ids {
		m.personal[ids[i]] = struct{}{}
	}
}

// RemovePersonalIDs removes the personal edge to Personal by ids.
func (m *TitleMutation) RemovePersonalIDs(ids ...int) {
	if m.removedpersonal == nil {
		m.removedpersonal = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpersonal[ids[i]] = struct{}{}
	}
}

// RemovedPersonal returns the removed ids of personal.
func (m *TitleMutation) RemovedPersonalIDs() (ids []int) {
	for id := range m.removedpersonal {
		ids = append(ids, id)
	}
	return
}

// PersonalIDs returns the personal ids in the mutation.
func (m *TitleMutation) PersonalIDs() (ids []int) {
	for id := range m.personal {
		ids = append(ids, id)
	}
	return
}

// ResetPersonal reset all changes of the "personal" edge.
func (m *TitleMutation) ResetPersonal() {
	m.personal = nil
	m.removedpersonal = nil
}

// AddCustomerIDs adds the customer edge to Customer by ids.
func (m *TitleMutation) AddCustomerIDs(ids ...int) {
	if m.customer == nil {
		m.customer = make(map[int]struct{})
	}
	for i := range ids {
		m.customer[ids[i]] = struct{}{}
	}
}

// RemoveCustomerIDs removes the customer edge to Customer by ids.
func (m *TitleMutation) RemoveCustomerIDs(ids ...int) {
	if m.removedcustomer == nil {
		m.removedcustomer = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcustomer[ids[i]] = struct{}{}
	}
}

// RemovedCustomer returns the removed ids of customer.
func (m *TitleMutation) RemovedCustomerIDs() (ids []int) {
	for id := range m.removedcustomer {
		ids = append(ids, id)
	}
	return
}

// CustomerIDs returns the customer ids in the mutation.
func (m *TitleMutation) CustomerIDs() (ids []int) {
	for id := range m.customer {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer reset all changes of the "customer" edge.
func (m *TitleMutation) ResetCustomer() {
	m.customer = nil
	m.removedcustomer = nil
}

// Op returns the operation name.
func (m *TitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Title).
func (m *TitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.titlename != nil {
		fields = append(fields, title.FieldTitlename)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case title.FieldTitlename:
		return m.Titlename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case title.FieldTitlename:
		return m.OldTitlename(ctx)
	}
	return nil, fmt.Errorf("unknown Title field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case title.FieldTitlename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitlename(v)
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Title numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Title nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TitleMutation) ResetField(name string) error {
	switch name {
	case title.FieldTitlename:
		m.ResetTitlename()
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.personal != nil {
		edges = append(edges, title.EdgePersonal)
	}
	if m.customer != nil {
		edges = append(edges, title.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case title.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.personal))
		for id := range m.personal {
			ids = append(ids, id)
		}
		return ids
	case title.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.customer))
		for id := range m.customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpersonal != nil {
		edges = append(edges, title.EdgePersonal)
	}
	if m.removedcustomer != nil {
		edges = append(edges, title.EdgeCustomer)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case title.EdgePersonal:
		ids := make([]ent.Value, 0, len(m.removedpersonal))
		for id := range m.removedpersonal {
			ids = append(ids, id)
		}
		return ids
	case title.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.removedcustomer))
		for id := range m.removedcustomer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Title unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TitleMutation) ResetEdge(name string) error {
	switch name {
	case title.EdgePersonal:
		m.ResetPersonal()
		return nil
	case title.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Title edge %s", name)
}

// TypeproductMutation represents an operation that mutate the Typeproducts
// nodes in the graph.
type TypeproductMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Typeproductname *string
	clearedFields    map[string]struct{}
	product          map[int]struct{}
	removedproduct   map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Typeproduct, error)
}

var _ ent.Mutation = (*TypeproductMutation)(nil)

// typeproductOption allows to manage the mutation configuration using functional options.
type typeproductOption func(*TypeproductMutation)

// newTypeproductMutation creates new mutation for $n.Name.
func newTypeproductMutation(c config, op Op, opts ...typeproductOption) *TypeproductMutation {
	m := &TypeproductMutation{
		config:        c,
		op:            op,
		typ:           TypeTypeproduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTypeproductID sets the id field of the mutation.
func withTypeproductID(id int) typeproductOption {
	return func(m *TypeproductMutation) {
		var (
			err   error
			once  sync.Once
			value *Typeproduct
		)
		m.oldValue = func(ctx context.Context) (*Typeproduct, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Typeproduct.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTypeproduct sets the old Typeproduct of the mutation.
func withTypeproduct(node *Typeproduct) typeproductOption {
	return func(m *TypeproductMutation) {
		m.oldValue = func(context.Context) (*Typeproduct, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TypeproductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TypeproductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TypeproductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTypeproductname sets the Typeproductname field.
func (m *TypeproductMutation) SetTypeproductname(s string) {
	m._Typeproductname = &s
}

// Typeproductname returns the Typeproductname value in the mutation.
func (m *TypeproductMutation) Typeproductname() (r string, exists bool) {
	v := m._Typeproductname
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeproductname returns the old Typeproductname value of the Typeproduct.
// If the Typeproduct object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TypeproductMutation) OldTypeproductname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTypeproductname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTypeproductname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeproductname: %w", err)
	}
	return oldValue.Typeproductname, nil
}

// ResetTypeproductname reset all changes of the "Typeproductname" field.
func (m *TypeproductMutation) ResetTypeproductname() {
	m._Typeproductname = nil
}

// AddProductIDs adds the product edge to Product by ids.
func (m *TypeproductMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// RemoveProductIDs removes the product edge to Product by ids.
func (m *TypeproductMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed ids of product.
func (m *TypeproductMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the product ids in the mutation.
func (m *TypeproductMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *TypeproductMutation) ResetProduct() {
	m.product = nil
	m.removedproduct = nil
}

// Op returns the operation name.
func (m *TypeproductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Typeproduct).
func (m *TypeproductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TypeproductMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Typeproductname != nil {
		fields = append(fields, typeproduct.FieldTypeproductname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TypeproductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case typeproduct.FieldTypeproductname:
		return m.Typeproductname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TypeproductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case typeproduct.FieldTypeproductname:
		return m.OldTypeproductname(ctx)
	}
	return nil, fmt.Errorf("unknown Typeproduct field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TypeproductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case typeproduct.FieldTypeproductname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeproductname(v)
		return nil
	}
	return fmt.Errorf("unknown Typeproduct field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TypeproductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TypeproductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TypeproductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Typeproduct numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TypeproductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TypeproductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TypeproductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Typeproduct nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TypeproductMutation) ResetField(name string) error {
	switch name {
	case typeproduct.FieldTypeproductname:
		m.ResetTypeproductname()
		return nil
	}
	return fmt.Errorf("unknown Typeproduct field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TypeproductMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.product != nil {
		edges = append(edges, typeproduct.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TypeproductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case typeproduct.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TypeproductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproduct != nil {
		edges = append(edges, typeproduct.EdgeProduct)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TypeproductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case typeproduct.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TypeproductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TypeproductMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TypeproductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Typeproduct unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TypeproductMutation) ResetEdge(name string) error {
	switch name {
	case typeproduct.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown Typeproduct edge %s", name)
}
