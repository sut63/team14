/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersAdminrepair,
    ControllersAdminrepairFromJSON,
    ControllersAdminrepairToJSON,
    ControllersCustomer,
    ControllersCustomerFromJSON,
    ControllersCustomerToJSON,
    ControllersDepartment,
    ControllersDepartmentFromJSON,
    ControllersDepartmentToJSON,
    ControllersFix,
    ControllersFixFromJSON,
    ControllersFixToJSON,
    ControllersFixcomtype,
    ControllersFixcomtypeFromJSON,
    ControllersFixcomtypeToJSON,
    ControllersGender,
    ControllersGenderFromJSON,
    ControllersGenderToJSON,
    ControllersPersonal,
    ControllersPersonalFromJSON,
    ControllersPersonalToJSON,
    ControllersProduct,
    ControllersProductFromJSON,
    ControllersProductToJSON,
    ControllersReceipt,
    ControllersReceiptFromJSON,
    ControllersReceiptToJSON,
    EntAdminrepair,
    EntAdminrepairFromJSON,
    EntAdminrepairToJSON,
    EntBrand,
    EntBrandFromJSON,
    EntBrandToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntFix,
    EntFixFromJSON,
    EntFixToJSON,
    EntFixbrand,
    EntFixbrandFromJSON,
    EntFixbrandToJSON,
    EntFixcomtype,
    EntFixcomtypeFromJSON,
    EntFixcomtypeToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntPaymentType,
    EntPaymentTypeFromJSON,
    EntPaymentTypeToJSON,
    EntPersonal,
    EntPersonalFromJSON,
    EntPersonalToJSON,
    EntProduct,
    EntProductFromJSON,
    EntProductToJSON,
    EntReceipt,
    EntReceiptFromJSON,
    EntReceiptToJSON,
    EntTitle,
    EntTitleFromJSON,
    EntTitleToJSON,
    EntTypeproduct,
    EntTypeproductFromJSON,
    EntTypeproductToJSON,
} from '../models';

export interface CreateAdminrepairRequest {
    adminrepair: ControllersAdminrepair;
}

export interface CreateBrandRequest {
    brand: EntBrand;
}

export interface CreateCustomerRequest {
    customer: ControllersCustomer;
}

export interface CreateDepartmnetRequest {
    departmnet: ControllersDepartment;
}

export interface CreateFixRequest {
    fix: ControllersFix;
}

export interface CreateFixbrandRequest {
    fixbrand: EntFixbrand;
}

export interface CreateFixcomtypeRequest {
    fixcomtype: ControllersFixcomtype;
}

export interface CreateGenderRequest {
    gender: ControllersGender;
}

export interface CreatePaymenttypeRequest {
    paymenttype: EntPaymentType;
}

export interface CreatePersonalRequest {
    personal: ControllersPersonal;
}

export interface CreateProductRequest {
    product: ControllersProduct;
}

export interface CreateReceiptRequest {
    receipt: ControllersReceipt;
}

export interface CreateTitleRequest {
    title: object;
}

export interface CreateTypeproductRequest {
    typeproduct: EntTypeproduct;
}

export interface DeleteAdminrepairRequest {
    id: number;
}

export interface DeleteBrandRequest {
    id: number;
}

export interface DeleteCustomerRequest {
    id: number;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteFixRequest {
    id: number;
}

export interface DeleteFixbrandRequest {
    id: number;
}

export interface DeleteFixcomtypeRequest {
    id: number;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeletePaymenttypeRequest {
    id: number;
}

export interface DeletePersonalRequest {
    id: number;
}

export interface DeleteProductRequest {
    id: number;
}

export interface DeleteReceiptRequest {
    id: number;
}

export interface DeleteTitleRequest {
    id: number;
}

export interface DeleteTypeproductRequest {
    id: number;
}

export interface GetAdminrepairRequest {
    id: number;
}

export interface GetBrandRequest {
    id: number;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetCustomerSearchRequest {
    customer?: string;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetFixRequest {
    id: number;
}

export interface GetFixbrandRequest {
    id: number;
}

export interface GetFixcomtypeRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetPaymenttypeRequest {
    id: number;
}

export interface GetPersonalRequest {
    id: number;
}

export interface GetPersonalSearchRequest {
    personal?: string;
}

export interface GetReceiptRequest {
    id: number;
}

export interface GetTitleRequest {
    id: number;
}

export interface GetTypeproductRequest {
    id: number;
}

export interface ListAdminrepairRequest {
    limit?: number;
    offset?: number;
}

export interface ListBrandRequest {
    limit?: number;
    offset?: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListFixRequest {
    limit?: number;
    offset?: number;
}

export interface ListFixbrandRequest {
    limit?: number;
    offset?: number;
}

export interface ListFixcomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymenttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPersonalRequest {
    limit?: number;
    offset?: number;
}

export interface ListProductRequest {
    limit?: number;
    offset?: number;
}

export interface ListReceiptRequest {
    limit?: number;
    offset?: number;
}

export interface ListTitleRequest {
    limit?: number;
    offset?: number;
}

export interface ListTypeproductRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAdminrepairRequest {
    id: number;
    adminrepair: EntAdminrepair;
}

export interface UpdateCustomerRequest {
    id: number;
    customer: EntCustomer;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateFixRequest {
    id: number;
    fix: EntFix;
}

export interface UpdateFixcomtypeRequest {
    id: number;
    fixcomtype: EntFixcomtype;
}

export interface UpdateGenderRequest {
    id: number;
    gender: EntGender;
}

export interface UpdatePaymenttypeRequest {
    id: number;
    paymenttype: EntPaymentType;
}

export interface UpdatePersonalRequest {
    id: number;
    personal: EntPersonal;
}

export interface UpdateReceiptRequest {
    id: number;
    receipt: EntReceipt;
}

export interface UpdateTitleRequest {
    id: number;
    title: EntTitle;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create adminrepair
     * Create adminrepair
     */
    async createAdminrepairRaw(requestParameters: CreateAdminrepairRequest): Promise<runtime.ApiResponse<EntAdminrepair>> {
        if (requestParameters.adminrepair === null || requestParameters.adminrepair === undefined) {
            throw new runtime.RequiredError('adminrepair','Required parameter requestParameters.adminrepair was null or undefined when calling createAdminrepair.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/adminrepairs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersAdminrepairToJSON(requestParameters.adminrepair),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAdminrepairFromJSON(jsonValue));
    }

    /**
     * Create adminrepair
     * Create adminrepair
     */
    async createAdminrepair(requestParameters: CreateAdminrepairRequest): Promise<EntAdminrepair> {
        const response = await this.createAdminrepairRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create brand
     * Create brand
     */
    async createBrandRaw(requestParameters: CreateBrandRequest): Promise<runtime.ApiResponse<EntBrand>> {
        if (requestParameters.brand === null || requestParameters.brand === undefined) {
            throw new runtime.RequiredError('brand','Required parameter requestParameters.brand was null or undefined when calling createBrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/brands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBrandToJSON(requestParameters.brand),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBrandFromJSON(jsonValue));
    }

    /**
     * Create brand
     * Create brand
     */
    async createBrand(requestParameters: CreateBrandRequest): Promise<EntBrand> {
        const response = await this.createBrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<ControllersCustomer>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCustomerToJSON(requestParameters.customer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersCustomerFromJSON(jsonValue));
    }

    /**
     * Create customer
     * Create customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<ControllersCustomer> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create departmnet
     * Create departmnet
     */
    async createDepartmnetRaw(requestParameters: CreateDepartmnetRequest): Promise<runtime.ApiResponse<ControllersDepartment>> {
        if (requestParameters.departmnet === null || requestParameters.departmnet === undefined) {
            throw new runtime.RequiredError('departmnet','Required parameter requestParameters.departmnet was null or undefined when calling createDepartmnet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDepartmentToJSON(requestParameters.departmnet),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersDepartmentFromJSON(jsonValue));
    }

    /**
     * Create departmnet
     * Create departmnet
     */
    async createDepartmnet(requestParameters: CreateDepartmnetRequest): Promise<ControllersDepartment> {
        const response = await this.createDepartmnetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fix
     * Create fix
     */
    async createFixRaw(requestParameters: CreateFixRequest): Promise<runtime.ApiResponse<ControllersFix>> {
        if (requestParameters.fix === null || requestParameters.fix === undefined) {
            throw new runtime.RequiredError('fix','Required parameter requestParameters.fix was null or undefined when calling createFix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersFixToJSON(requestParameters.fix),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersFixFromJSON(jsonValue));
    }

    /**
     * Create fix
     * Create fix
     */
    async createFix(requestParameters: CreateFixRequest): Promise<ControllersFix> {
        const response = await this.createFixRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fixbrand
     * Create fixbrand
     */
    async createFixbrandRaw(requestParameters: CreateFixbrandRequest): Promise<runtime.ApiResponse<EntFixbrand>> {
        if (requestParameters.fixbrand === null || requestParameters.fixbrand === undefined) {
            throw new runtime.RequiredError('fixbrand','Required parameter requestParameters.fixbrand was null or undefined when calling createFixbrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixbrands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFixbrandToJSON(requestParameters.fixbrand),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixbrandFromJSON(jsonValue));
    }

    /**
     * Create fixbrand
     * Create fixbrand
     */
    async createFixbrand(requestParameters: CreateFixbrandRequest): Promise<EntFixbrand> {
        const response = await this.createFixbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fixcomtype
     * Create fixcomtype
     */
    async createFixcomtypeRaw(requestParameters: CreateFixcomtypeRequest): Promise<runtime.ApiResponse<ControllersFixcomtype>> {
        if (requestParameters.fixcomtype === null || requestParameters.fixcomtype === undefined) {
            throw new runtime.RequiredError('fixcomtype','Required parameter requestParameters.fixcomtype was null or undefined when calling createFixcomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixcomtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersFixcomtypeToJSON(requestParameters.fixcomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersFixcomtypeFromJSON(jsonValue));
    }

    /**
     * Create fixcomtype
     * Create fixcomtype
     */
    async createFixcomtype(requestParameters: CreateFixcomtypeRequest): Promise<ControllersFixcomtype> {
        const response = await this.createFixcomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<ControllersGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<ControllersGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttypeRaw(requestParameters: CreatePaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymentType>> {
        if (requestParameters.paymenttype === null || requestParameters.paymenttype === undefined) {
            throw new runtime.RequiredError('paymenttype','Required parameter requestParameters.paymenttype was null or undefined when calling createPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentTypeToJSON(requestParameters.paymenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentTypeFromJSON(jsonValue));
    }

    /**
     * Create paymenttype
     * Create paymenttype
     */
    async createPaymenttype(requestParameters: CreatePaymenttypeRequest): Promise<EntPaymentType> {
        const response = await this.createPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create personal
     * Create personal
     */
    async createPersonalRaw(requestParameters: CreatePersonalRequest): Promise<runtime.ApiResponse<ControllersPersonal>> {
        if (requestParameters.personal === null || requestParameters.personal === undefined) {
            throw new runtime.RequiredError('personal','Required parameter requestParameters.personal was null or undefined when calling createPersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/personals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPersonalToJSON(requestParameters.personal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersPersonalFromJSON(jsonValue));
    }

    /**
     * Create personal
     * Create personal
     */
    async createPersonal(requestParameters: CreatePersonalRequest): Promise<ControllersPersonal> {
        const response = await this.createPersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create product
     * Create product
     */
    async createProductRaw(requestParameters: CreateProductRequest): Promise<runtime.ApiResponse<ControllersProduct>> {
        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling createProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProductToJSON(requestParameters.product),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersProductFromJSON(jsonValue));
    }

    /**
     * Create product
     * Create product
     */
    async createProduct(requestParameters: CreateProductRequest): Promise<ControllersProduct> {
        const response = await this.createProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create receipt
     * Create receipt
     */
    async createReceiptRaw(requestParameters: CreateReceiptRequest): Promise<runtime.ApiResponse<ControllersReceipt>> {
        if (requestParameters.receipt === null || requestParameters.receipt === undefined) {
            throw new runtime.RequiredError('receipt','Required parameter requestParameters.receipt was null or undefined when calling createReceipt.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/receipts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersReceiptToJSON(requestParameters.receipt),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersReceiptFromJSON(jsonValue));
    }

    /**
     * Create receipt
     * Create receipt
     */
    async createReceipt(requestParameters: CreateReceiptRequest): Promise<ControllersReceipt> {
        const response = await this.createReceiptRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create title
     * Create title
     */
    async createTitleRaw(requestParameters: CreateTitleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling createTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/titles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.title as any,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create title
     * Create title
     */
    async createTitle(requestParameters: CreateTitleRequest): Promise<object> {
        const response = await this.createTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create typeproduct
     * Create typeproduct
     */
    async createTypeproductRaw(requestParameters: CreateTypeproductRequest): Promise<runtime.ApiResponse<EntTypeproduct>> {
        if (requestParameters.typeproduct === null || requestParameters.typeproduct === undefined) {
            throw new runtime.RequiredError('typeproduct','Required parameter requestParameters.typeproduct was null or undefined when calling createTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typeproducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeproductToJSON(requestParameters.typeproduct),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeproductFromJSON(jsonValue));
    }

    /**
     * Create typeproduct
     * Create typeproduct
     */
    async createTypeproduct(requestParameters: CreateTypeproductRequest): Promise<EntTypeproduct> {
        const response = await this.createTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get adminrepair by ID
     * Delete a adminrepair entity by ID
     */
    async deleteAdminrepairRaw(requestParameters: DeleteAdminrepairRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAdminrepair.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/adminrepairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get adminrepair by ID
     * Delete a adminrepair entity by ID
     */
    async deleteAdminrepair(requestParameters: DeleteAdminrepairRequest): Promise<object> {
        const response = await this.deleteAdminrepairRaw(requestParameters);
        return await response.value();
    }

    /**
     * get brand by ID
     * Delete a brand entity by ID
     */
    async deleteBrandRaw(requestParameters: DeleteBrandRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/brand/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get brand by ID
     * Delete a brand entity by ID
     */
    async deleteBrand(requestParameters: DeleteBrandRequest): Promise<object> {
        const response = await this.deleteBrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by ID
     * Delete a customer entity by ID
     */
    async deleteCustomerRaw(requestParameters: DeleteCustomerRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get customer by ID
     * Delete a customer entity by ID
     */
    async deleteCustomer(requestParameters: DeleteCustomerRequest): Promise<object> {
        const response = await this.deleteCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fix by ID
     * Delete a fix entity by ID
     */
    async deleteFixRaw(requestParameters: DeleteFixRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fix by ID
     * Delete a fix entity by ID
     */
    async deleteFix(requestParameters: DeleteFixRequest): Promise<object> {
        const response = await this.deleteFixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixbrand by ID
     * Delete a fixbrand entity by ID
     */
    async deleteFixbrandRaw(requestParameters: DeleteFixbrandRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFixbrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixbrands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fixbrand by ID
     * Delete a fixbrand entity by ID
     */
    async deleteFixbrand(requestParameters: DeleteFixbrandRequest): Promise<object> {
        const response = await this.deleteFixbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixcomtype by ID
     * Delete a fixcomtype entity by ID
     */
    async deleteFixcomtypeRaw(requestParameters: DeleteFixcomtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFixcomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixcomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fixcomtype by ID
     * Delete a fixcomtype entity by ID
     */
    async deleteFixcomtype(requestParameters: DeleteFixcomtypeRequest): Promise<object> {
        const response = await this.deleteFixcomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymenttype by ID
     * Delete a paymenttype entity by ID
     */
    async deletePaymenttypeRaw(requestParameters: DeletePaymenttypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get paymenttype by ID
     * Delete a paymenttype entity by ID
     */
    async deletePaymenttype(requestParameters: DeletePaymenttypeRequest): Promise<object> {
        const response = await this.deletePaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personal by ID
     * Delete a personal entity by ID
     */
    async deletePersonalRaw(requestParameters: DeletePersonalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get personal by ID
     * Delete a personal entity by ID
     */
    async deletePersonal(requestParameters: DeletePersonalRequest): Promise<object> {
        const response = await this.deletePersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProduct(requestParameters: DeleteProductRequest): Promise<object> {
        const response = await this.deleteProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get receipt by ID
     * Delete a receipt entity by ID
     */
    async deleteReceiptRaw(requestParameters: DeleteReceiptRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReceipt.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get receipt by ID
     * Delete a receipt entity by ID
     */
    async deleteReceipt(requestParameters: DeleteReceiptRequest): Promise<object> {
        const response = await this.deleteReceiptRaw(requestParameters);
        return await response.value();
    }

    /**
     * get title by ID
     * Delete a title entity by ID
     */
    async deleteTitleRaw(requestParameters: DeleteTitleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get title by ID
     * Delete a title entity by ID
     */
    async deleteTitle(requestParameters: DeleteTitleRequest): Promise<object> {
        const response = await this.deleteTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typeproduct by ID
     * Delete a typeproduct entity by ID
     */
    async deleteTypeproductRaw(requestParameters: DeleteTypeproductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproduct/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get typeproduct by ID
     * Delete a typeproduct entity by ID
     */
    async deleteTypeproduct(requestParameters: DeleteTypeproductRequest): Promise<object> {
        const response = await this.deleteTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get adminrepair by ID
     * Get a adminrepair entity by ID
     */
    async getAdminrepairRaw(requestParameters: GetAdminrepairRequest): Promise<runtime.ApiResponse<EntAdminrepair>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAdminrepair.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/adminrepairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAdminrepairFromJSON(jsonValue));
    }

    /**
     * get adminrepair by ID
     * Get a adminrepair entity by ID
     */
    async getAdminrepair(requestParameters: GetAdminrepairRequest): Promise<EntAdminrepair> {
        const response = await this.getAdminrepairRaw(requestParameters);
        return await response.value();
    }

    /**
     * get brand by ID
     * Get a brand entity by ID
     */
    async getBrandRaw(requestParameters: GetBrandRequest): Promise<runtime.ApiResponse<EntBrand>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBrandFromJSON(jsonValue));
    }

    /**
     * get brand by ID
     * Get a brand entity by ID
     */
    async getBrand(requestParameters: GetBrandRequest): Promise<EntBrand> {
        const response = await this.getBrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customer by ID
     * Get a customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get customer by Search
     * Get a customer entity by Search
     */
    async getCustomerSearchRaw(requestParameters: GetCustomerSearchRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.customer !== undefined) {
            queryParameters['customer'] = requestParameters.customer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchcustomers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get customer by Search
     * Get a customer entity by Search
     */
    async getCustomerSearch(requestParameters: GetCustomerSearchRequest): Promise<EntCustomer> {
        const response = await this.getCustomerSearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fix by ID
     * Get a fix entity by ID
     */
    async getFixRaw(requestParameters: GetFixRequest): Promise<runtime.ApiResponse<EntFix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixFromJSON(jsonValue));
    }

    /**
     * get fix by ID
     * Get a fix entity by ID
     */
    async getFix(requestParameters: GetFixRequest): Promise<EntFix> {
        const response = await this.getFixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixbrand by ID
     * Get a fixbrand entity by ID
     */
    async getFixbrandRaw(requestParameters: GetFixbrandRequest): Promise<runtime.ApiResponse<EntFixbrand>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFixbrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixbrands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixbrandFromJSON(jsonValue));
    }

    /**
     * get fixbrand by ID
     * Get a fixbrand entity by ID
     */
    async getFixbrand(requestParameters: GetFixbrandRequest): Promise<EntFixbrand> {
        const response = await this.getFixbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixcomtype by ID
     * Get a fixcomtype entity by ID
     */
    async getFixcomtypeRaw(requestParameters: GetFixcomtypeRequest): Promise<runtime.ApiResponse<EntFixcomtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFixcomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixcomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixcomtypeFromJSON(jsonValue));
    }

    /**
     * get fixcomtype by ID
     * Get a fixcomtype entity by ID
     */
    async getFixcomtype(requestParameters: GetFixcomtypeRequest): Promise<EntFixcomtype> {
        const response = await this.getFixcomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttypeRaw(requestParameters: GetPaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentTypeFromJSON(jsonValue));
    }

    /**
     * get paymenttype by ID
     * Get a paymenttype entity by ID
     */
    async getPaymenttype(requestParameters: GetPaymenttypeRequest): Promise<EntPaymentType> {
        const response = await this.getPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personal by ID
     * Get a personal entity by ID
     */
    async getPersonalRaw(requestParameters: GetPersonalRequest): Promise<runtime.ApiResponse<EntPersonal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonalFromJSON(jsonValue));
    }

    /**
     * get personal by ID
     * Get a personal entity by ID
     */
    async getPersonal(requestParameters: GetPersonalRequest): Promise<EntPersonal> {
        const response = await this.getPersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get personal by Search
     * Get a personal entity by Search
     */
    async getPersonalSearchRaw(requestParameters: GetPersonalSearchRequest): Promise<runtime.ApiResponse<EntPersonal>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.personal !== undefined) {
            queryParameters['personal'] = requestParameters.personal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchpersonals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonalFromJSON(jsonValue));
    }

    /**
     * get personal by Search
     * Get a personal entity by Search
     */
    async getPersonalSearch(requestParameters: GetPersonalSearchRequest): Promise<EntPersonal> {
        const response = await this.getPersonalSearchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get receipt by ID
     * Get a receipt entity by ID
     */
    async getReceiptRaw(requestParameters: GetReceiptRequest): Promise<runtime.ApiResponse<EntReceipt>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReceipt.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReceiptFromJSON(jsonValue));
    }

    /**
     * get receipt by ID
     * Get a receipt entity by ID
     */
    async getReceipt(requestParameters: GetReceiptRequest): Promise<EntReceipt> {
        const response = await this.getReceiptRaw(requestParameters);
        return await response.value();
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitleRaw(requestParameters: GetTitleRequest): Promise<runtime.ApiResponse<EntTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTitleFromJSON(jsonValue));
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitle(requestParameters: GetTitleRequest): Promise<EntTitle> {
        const response = await this.getTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typeproduct by ID
     * Get a typeproduct entity by ID
     */
    async getTypeproductRaw(requestParameters: GetTypeproductRequest): Promise<runtime.ApiResponse<EntTypeproduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypeproduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeproductFromJSON(jsonValue));
    }

    /**
     * get typeproduct by ID
     * Get a typeproduct entity by ID
     */
    async getTypeproduct(requestParameters: GetTypeproductRequest): Promise<EntTypeproduct> {
        const response = await this.getTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list adminrepair entities
     * List adminrepair entities
     */
    async listAdminrepairRaw(requestParameters: ListAdminrepairRequest): Promise<runtime.ApiResponse<Array<EntAdminrepair>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/adminrepairs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAdminrepairFromJSON));
    }

    /**
     * list adminrepair entities
     * List adminrepair entities
     */
    async listAdminrepair(requestParameters: ListAdminrepairRequest): Promise<Array<EntAdminrepair>> {
        const response = await this.listAdminrepairRaw(requestParameters);
        return await response.value();
    }

    /**
     * list brand entities
     * List brand entities
     */
    async listBrandRaw(requestParameters: ListBrandRequest): Promise<runtime.ApiResponse<Array<EntBrand>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/brands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBrandFromJSON));
    }

    /**
     * list brand entities
     * List brand entities
     */
    async listBrand(requestParameters: ListBrandRequest): Promise<Array<EntBrand>> {
        const response = await this.listBrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list customer entities
     * List customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fix entities
     * List fix entities
     */
    async listFixRaw(requestParameters: ListFixRequest): Promise<runtime.ApiResponse<Array<EntFix>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFixFromJSON));
    }

    /**
     * list fix entities
     * List fix entities
     */
    async listFix(requestParameters: ListFixRequest): Promise<Array<EntFix>> {
        const response = await this.listFixRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fixbrand entities
     * List fixbrand entities
     */
    async listFixbrandRaw(requestParameters: ListFixbrandRequest): Promise<runtime.ApiResponse<Array<EntFixbrand>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixbrands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFixbrandFromJSON));
    }

    /**
     * list fixbrand entities
     * List fixbrand entities
     */
    async listFixbrand(requestParameters: ListFixbrandRequest): Promise<Array<EntFixbrand>> {
        const response = await this.listFixbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fixcomtype entities
     * List fixcomtype entities
     */
    async listFixcomtypeRaw(requestParameters: ListFixcomtypeRequest): Promise<runtime.ApiResponse<Array<EntFixcomtype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixcomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFixcomtypeFromJSON));
    }

    /**
     * list fixcomtype entities
     * List fixcomtype entities
     */
    async listFixcomtype(requestParameters: ListFixcomtypeRequest): Promise<Array<EntFixcomtype>> {
        const response = await this.listFixcomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttypeRaw(requestParameters: ListPaymenttypeRequest): Promise<runtime.ApiResponse<Array<EntPaymentType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentTypeFromJSON));
    }

    /**
     * list paymenttype entities
     * List paymenttype entities
     */
    async listPaymenttype(requestParameters: ListPaymenttypeRequest): Promise<Array<EntPaymentType>> {
        const response = await this.listPaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list personal entities
     * List personal entities
     */
    async listPersonalRaw(requestParameters: ListPersonalRequest): Promise<runtime.ApiResponse<Array<EntPersonal>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPersonalFromJSON));
    }

    /**
     * list personal entities
     * List personal entities
     */
    async listPersonal(requestParameters: ListPersonalRequest): Promise<Array<EntPersonal>> {
        const response = await this.listPersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list product entities
     * List product entities
     */
    async listProductRaw(requestParameters: ListProductRequest): Promise<runtime.ApiResponse<Array<EntProduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProductFromJSON));
    }

    /**
     * list product entities
     * List product entities
     */
    async listProduct(requestParameters: ListProductRequest): Promise<Array<EntProduct>> {
        const response = await this.listProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list receipt entities
     * List receipt entities
     */
    async listReceiptRaw(requestParameters: ListReceiptRequest): Promise<runtime.ApiResponse<Array<EntReceipt>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/receipts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntReceiptFromJSON));
    }

    /**
     * list receipt entities
     * List receipt entities
     */
    async listReceipt(requestParameters: ListReceiptRequest): Promise<Array<EntReceipt>> {
        const response = await this.listReceiptRaw(requestParameters);
        return await response.value();
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitleRaw(requestParameters: ListTitleRequest): Promise<runtime.ApiResponse<Array<EntTitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTitleFromJSON));
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitle(requestParameters: ListTitleRequest): Promise<Array<EntTitle>> {
        const response = await this.listTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list typeproduct entities
     * List typeproduct entities
     */
    async listTypeproductRaw(requestParameters: ListTypeproductRequest): Promise<runtime.ApiResponse<Array<EntTypeproduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typeproducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTypeproductFromJSON));
    }

    /**
     * list typeproduct entities
     * List typeproduct entities
     */
    async listTypeproduct(requestParameters: ListTypeproductRequest): Promise<Array<EntTypeproduct>> {
        const response = await this.listTypeproductRaw(requestParameters);
        return await response.value();
    }

    /**
     * update adminrepair by ID
     * Update a adminrepair entity by ID
     */
    async updateAdminrepairRaw(requestParameters: UpdateAdminrepairRequest): Promise<runtime.ApiResponse<EntAdminrepair>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAdminrepair.');
        }

        if (requestParameters.adminrepair === null || requestParameters.adminrepair === undefined) {
            throw new runtime.RequiredError('adminrepair','Required parameter requestParameters.adminrepair was null or undefined when calling updateAdminrepair.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/adminrepairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAdminrepairToJSON(requestParameters.adminrepair),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAdminrepairFromJSON(jsonValue));
    }

    /**
     * update adminrepair by ID
     * Update a adminrepair entity by ID
     */
    async updateAdminrepair(requestParameters: UpdateAdminrepairRequest): Promise<EntAdminrepair> {
        const response = await this.updateAdminrepairRaw(requestParameters);
        return await response.value();
    }

    /**
     * update customer by ID
     * Update a customer entity by ID
     */
    async updateCustomerRaw(requestParameters: UpdateCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomer.');
        }

        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling updateCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCustomerToJSON(requestParameters.customer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * update customer by ID
     * Update a customer entity by ID
     */
    async updateCustomer(requestParameters: UpdateCustomerRequest): Promise<EntCustomer> {
        const response = await this.updateCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update fix by ID
     * Update a fix entity by ID
     */
    async updateFixRaw(requestParameters: UpdateFixRequest): Promise<runtime.ApiResponse<EntFix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFix.');
        }

        if (requestParameters.fix === null || requestParameters.fix === undefined) {
            throw new runtime.RequiredError('fix','Required parameter requestParameters.fix was null or undefined when calling updateFix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFixToJSON(requestParameters.fix),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixFromJSON(jsonValue));
    }

    /**
     * update fix by ID
     * Update a fix entity by ID
     */
    async updateFix(requestParameters: UpdateFixRequest): Promise<EntFix> {
        const response = await this.updateFixRaw(requestParameters);
        return await response.value();
    }

    /**
     * update fixcomtype by ID
     * Update a fixcomtype entity by ID
     */
    async updateFixcomtypeRaw(requestParameters: UpdateFixcomtypeRequest): Promise<runtime.ApiResponse<EntFixcomtype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFixcomtype.');
        }

        if (requestParameters.fixcomtype === null || requestParameters.fixcomtype === undefined) {
            throw new runtime.RequiredError('fixcomtype','Required parameter requestParameters.fixcomtype was null or undefined when calling updateFixcomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixcomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFixcomtypeToJSON(requestParameters.fixcomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixcomtypeFromJSON(jsonValue));
    }

    /**
     * update fixcomtype by ID
     * Update a fixcomtype entity by ID
     */
    async updateFixcomtype(requestParameters: UpdateFixcomtypeRequest): Promise<EntFixcomtype> {
        const response = await this.updateFixcomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGenderRaw(requestParameters: UpdateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGender.');
        }

        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling updateGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGender(requestParameters: UpdateGenderRequest): Promise<EntGender> {
        const response = await this.updateGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * update paymenttype by ID
     * Update a paymenttype entity by ID
     */
    async updatePaymenttypeRaw(requestParameters: UpdatePaymenttypeRequest): Promise<runtime.ApiResponse<EntPaymentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePaymenttype.');
        }

        if (requestParameters.paymenttype === null || requestParameters.paymenttype === undefined) {
            throw new runtime.RequiredError('paymenttype','Required parameter requestParameters.paymenttype was null or undefined when calling updatePaymenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentTypeToJSON(requestParameters.paymenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentTypeFromJSON(jsonValue));
    }

    /**
     * update paymenttype by ID
     * Update a paymenttype entity by ID
     */
    async updatePaymenttype(requestParameters: UpdatePaymenttypeRequest): Promise<EntPaymentType> {
        const response = await this.updatePaymenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update personal by ID
     * Update a personal entity by ID
     */
    async updatePersonalRaw(requestParameters: UpdatePersonalRequest): Promise<runtime.ApiResponse<EntPersonal>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePersonal.');
        }

        if (requestParameters.personal === null || requestParameters.personal === undefined) {
            throw new runtime.RequiredError('personal','Required parameter requestParameters.personal was null or undefined when calling updatePersonal.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/personals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPersonalToJSON(requestParameters.personal),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPersonalFromJSON(jsonValue));
    }

    /**
     * update personal by ID
     * Update a personal entity by ID
     */
    async updatePersonal(requestParameters: UpdatePersonalRequest): Promise<EntPersonal> {
        const response = await this.updatePersonalRaw(requestParameters);
        return await response.value();
    }

    /**
     * update receipt by ID
     * Update a receipt entity by ID
     */
    async updateReceiptRaw(requestParameters: UpdateReceiptRequest): Promise<runtime.ApiResponse<EntReceipt>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReceipt.');
        }

        if (requestParameters.receipt === null || requestParameters.receipt === undefined) {
            throw new runtime.RequiredError('receipt','Required parameter requestParameters.receipt was null or undefined when calling updateReceipt.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/receipts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntReceiptToJSON(requestParameters.receipt),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReceiptFromJSON(jsonValue));
    }

    /**
     * update receipt by ID
     * Update a receipt entity by ID
     */
    async updateReceipt(requestParameters: UpdateReceiptRequest): Promise<EntReceipt> {
        const response = await this.updateReceiptRaw(requestParameters);
        return await response.value();
    }

    /**
     * update title by ID
     * Update a title entity by ID
     */
    async updateTitleRaw(requestParameters: UpdateTitleRequest): Promise<runtime.ApiResponse<EntTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTitle.');
        }

        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling updateTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTitleToJSON(requestParameters.title),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTitleFromJSON(jsonValue));
    }

    /**
     * update title by ID
     * Update a title entity by ID
     */
    async updateTitle(requestParameters: UpdateTitleRequest): Promise<EntTitle> {
        const response = await this.updateTitleRaw(requestParameters);
        return await response.value();
    }

}
