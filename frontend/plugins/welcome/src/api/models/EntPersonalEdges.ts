/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntAdminrepair,
    EntAdminrepairFromJSON,
    EntAdminrepairFromJSONTyped,
    EntAdminrepairToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerFromJSONTyped,
    EntCustomerToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentFromJSONTyped,
    EntDepartmentToJSON,
    EntFix,
    EntFixFromJSON,
    EntFixFromJSONTyped,
    EntFixToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderFromJSONTyped,
    EntGenderToJSON,
    EntProduct,
    EntProductFromJSON,
    EntProductFromJSONTyped,
    EntProductToJSON,
    EntReceipt,
    EntReceiptFromJSON,
    EntReceiptFromJSONTyped,
    EntReceiptToJSON,
    EntTitle,
    EntTitleFromJSON,
    EntTitleFromJSONTyped,
    EntTitleToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntPersonalEdges
 */
export interface EntPersonalEdges {
    /**
     * Customer holds the value of the customer edge.
     * @type {Array<EntCustomer>}
     * @memberof EntPersonalEdges
     */
    customer?: Array<EntCustomer>;
    /**
     * 
     * @type {EntDepartment}
     * @memberof EntPersonalEdges
     */
    department?: EntDepartment;
    /**
     * Fix holds the value of the fix edge.
     * @type {Array<EntFix>}
     * @memberof EntPersonalEdges
     */
    fix?: Array<EntFix>;
    /**
     * 
     * @type {EntGender}
     * @memberof EntPersonalEdges
     */
    gender?: EntGender;
    /**
     * Personal holds the value of the personal edge.
     * @type {Array<EntAdminrepair>}
     * @memberof EntPersonalEdges
     */
    personal?: Array<EntAdminrepair>;
    /**
     * Product holds the value of the product edge.
     * @type {Array<EntProduct>}
     * @memberof EntPersonalEdges
     */
    product?: Array<EntProduct>;
    /**
     * Receipt holds the value of the receipt edge.
     * @type {Array<EntReceipt>}
     * @memberof EntPersonalEdges
     */
    receipt?: Array<EntReceipt>;
    /**
     * 
     * @type {EntTitle}
     * @memberof EntPersonalEdges
     */
    title?: EntTitle;
}

export function EntPersonalEdgesFromJSON(json: any): EntPersonalEdges {
    return EntPersonalEdgesFromJSONTyped(json, false);
}

export function EntPersonalEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntPersonalEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customer': !exists(json, 'customer') ? undefined : ((json['customer'] as Array<any>).map(EntCustomerFromJSON)),
        'department': !exists(json, 'department') ? undefined : EntDepartmentFromJSON(json['department']),
        'fix': !exists(json, 'fix') ? undefined : ((json['fix'] as Array<any>).map(EntFixFromJSON)),
        'gender': !exists(json, 'gender') ? undefined : EntGenderFromJSON(json['gender']),
        'personal': !exists(json, 'personal') ? undefined : ((json['personal'] as Array<any>).map(EntAdminrepairFromJSON)),
        'product': !exists(json, 'product') ? undefined : ((json['product'] as Array<any>).map(EntProductFromJSON)),
        'receipt': !exists(json, 'receipt') ? undefined : ((json['receipt'] as Array<any>).map(EntReceiptFromJSON)),
        'title': !exists(json, 'title') ? undefined : EntTitleFromJSON(json['title']),
    };
}

export function EntPersonalEdgesToJSON(value?: EntPersonalEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customer': value.customer === undefined ? undefined : ((value.customer as Array<any>).map(EntCustomerToJSON)),
        'department': EntDepartmentToJSON(value.department),
        'fix': value.fix === undefined ? undefined : ((value.fix as Array<any>).map(EntFixToJSON)),
        'gender': EntGenderToJSON(value.gender),
        'personal': value.personal === undefined ? undefined : ((value.personal as Array<any>).map(EntAdminrepairToJSON)),
        'product': value.product === undefined ? undefined : ((value.product as Array<any>).map(EntProductToJSON)),
        'receipt': value.receipt === undefined ? undefined : ((value.receipt as Array<any>).map(EntReceiptToJSON)),
        'title': EntTitleToJSON(value.title),
    };
}


